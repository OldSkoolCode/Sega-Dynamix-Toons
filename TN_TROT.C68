/* * * * *
*
*  TN_TROT.C
*
*  This file contains all the code associated with the translation to rotation
*  part.
*
*  By Chris Cole -- (c) 1993 Dynamix Software Development, Inc.
*
*  Modification History:
*  ---------------------
*  07/13/93 ChrisC   File created
*
* * * * */
#include "vm.h"
#include "tim.h"

#define TRANSROT_BELT_X       51
#define TRANSROT_BELT_Y       34
#define TRANSROT_FBELT_X      (110-67)
#define TRANSROT_FBELT_Y      TRANSROT_BELT_Y

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                            *
*                                  TRANSROT                                  *
*                                                                            *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
/* supershape structure definition */
static F_SSHAPE_C transrot1_2 = {0, TRANSROT_PLANE1, {0,6,7,10},
   {{6,2},{14,1},{16,0},{3,4}}};
static F_SSHAPE_C transrot1 = {&transrot1_2, TRANSROT_PLANE, {9,1,0,8},
   {{0,4},{15,9},{30,2},{14,14}}};
static F_SSHAPE_C transrot2_2 = {0, TRANSROT_PLANE1, {8,6,7,11},
   {{14,14},{17,1},{19,0},{6,4}}};
static F_SSHAPE_C transrot2 = {&transrot2_2, TRANSROT_PLANE, {9,2,0,0},
   {{3,4},{15,9},{6,2},{30,2}}};
static F_SSHAPE_C transrot3_2 = {0, TRANSROT_PLANE1, {8,6,7,12},
   {{14,14},{18,1},{20,0},{8,3}}};
static F_SSHAPE_C transrot3 = {&transrot3_2, TRANSROT_PLANE, {9,3,0,0},
   {{5,4},{15,9},{6,2},{30,2}}};
static F_SSHAPE_C transrot4_2 = {0, TRANSROT_PLANE1, {8,6,7,13},
   {{14,14},{21,1},{23,0},{7,3}}};
static F_SSHAPE_C transrot4 = {&transrot4_2, TRANSROT_PLANE, {9,0,0,1},
   {{8,4},{6,2},{30,2},{15,9}}};
static F_SSHAPE_C transrot5_2 = {0, TRANSROT_PLANE1, {8,5,7,12},
   {{14,14},{19,2},{21,0},{8,3}}};
static F_SSHAPE_C transrot5 = {&transrot5_2, TRANSROT_PLANE, {9,0,0,1},
   {{6,4},{6,2},{30,2},{15,9}}};
static F_SSHAPE_C transrot6_2 = {0, TRANSROT_PLANE1, {8,4,7,11},
   {{14,14},{15,2},{17,0},{6,4}}};
static F_SSHAPE_C transrot6 = {&transrot6_2, TRANSROT_PLANE, {9,0,0,1},
   {{3,4},{6,2},{30,2},{15,9}}};
static F_SSHAPE_C transrot7_2 = {0, TRANSROT_PLANE1, {8,5,7,10},
   {{14,14},{13,2},{16,0},{3,4}}};
static F_SSHAPE_C transrot7 = {&transrot7_2, TRANSROT_PLANE, {9,0,0,1},
   {{0,4},{6,2},{30,2},{15,9}}};

/* supershape table definition */
PC_SSHAPE_C far transrot_ss_tab[TRANSROT_NUM_STATES] = 
   {&transrot1,&transrot2,&transrot3,&transrot4,&transrot5,&transrot6,
    &transrot7};

/* size. */
TIM_VEC_C far transrot_size[TRANSROT_NUM_STATES] = 
   {{47,29},{50,29},{52,29},{55,29},{53,29},{50,29},
    {47,29}};

/* erase rectangle coordinate */
TIM_SCVEC_C far transrot_os[TRANSROT_NUM_STATES] = 
   {{0,0},{0,0},{0,0},{0,0},{0,0},{0,0},{0,0}};

/* border definitions. */
static PART_BORDER_C far transrot1_bord[TRANSROT_BORDERS] =
   {{10,2,0},{37,2,0},{47,7,0},{39,11,0},
    {42,29,0},{6,29,0},{9,11,0},{0,7,0}};
static PART_BORDER_C far transrot2_bord[TRANSROT_BORDERS] =
   {{10,2,0},{37,2,0},{47,7,0},{39,11,0},
    {42,29,0},{6,29,0},{9,11,0},{10,7,0}};

/* border tables */
PC_PART_BORDER_C far transrot_bord_tab[TRANSROT_NUM_STATES] =
   {transrot1_bord,transrot1_bord,transrot2_bord,transrot2_bord,
    transrot2_bord,transrot2_bord,transrot1_bord};
P_PART_BORDER far transrot_fbord_tab[TRANSROT_NUM_STATES];

/* * * * *
*
*  Functions
*
* * * * */
void transrot_reinit(PART *transrot)
{
   const static signed char far right_rope_tie[TRANSROT_NUM_STATES] =
   {
      91,97,101,108,103,97,91
   };

   /* If initalizing for the first time, set slopes for all of the borders */
   if(!transrot)
   {
      set_border_table_slopes(PT_TRANS_ROT, 1, transrot_bord_tab,
                                    transrot_fbord_tab, TRANSROT_NUM_STATES);
      return;
   }

   transrot->belt_loc.y = TRANSROT_BELT_Y - TRANSROT_BELT_SIZE/2;

   if (transrot->flags2 & F2_FLIP_H_DRAW)
   {
      transrot->rope_loc[0].x = transrot->base_size.x -
         right_rope_tie[transrot->state];
      transrot->border = transrot_fbord_tab[transrot->state];
      transrot->belt_loc.x = TRANSROT_FBELT_X - TRANSROT_BELT_SIZE/2;
   }
   else
   {
      transrot->rope_loc[0].x = right_rope_tie[transrot->state];
      transrot->border = transrot_bord_tab[transrot->state];
      transrot->belt_loc.x = TRANSROT_BELT_X - TRANSROT_BELT_SIZE/2;
   }

   transrot->rope_loc[0].y = 14;
   generate_rope_lines(transrot->rope_tie[0]);

   set_adjusted_loc_size(transrot);
}

#pragma argsused
void transrot_flip(PART *transrot,short flip_mode)
{
   transrot->flags2 ^= F2_FLIP_H_DRAW;
   transrot_reinit(transrot);
   part_to_er(transrot,1|2);
   sub_parts_to_er(transrot,1|2);
   set_redraw(transrot,2);
}

short transrot_bounce(PART *cur_part)
{
   #define LEFT_TIE_BORD_NUM     6

   short bord_num;
   PART *transrot;

   transrot = cur_part->col_info.part;
   bord_num = cur_part->col_info.border_num;

   /* check if the border num collided with should be reordered. */
/*   if (transrot->flags2 & F2_FLIP_H_DRAW) */
/*      bord_num = TRANSROT_BORDERS - bord_num; */

   switch (bord_num)
   {
      case LEFT_TIE_BORD_NUM:
      case LEFT_TIE_BORD_NUM+1:
         if (  (!(transrot->flags2 & F2_FLIP_H_DRAW)
            && (cur_part->speed.x > 0))             
            || ((transrot->flags2 & F2_FLIP_H_DRAW) 
            && (cur_part->speed.x < 0)))
            transrot->sub_state = 1;
         break;
   }

   return(1);
}                 

#pragma argsused
short transrot_rope(PART *from_part,PART *transrot,short tie_num,short rope_type,short mass,long force)
{
   if(rope_type == RP_SLACK)
   {
      transrot->rope_tie[0]->slack++;
      return(0);
   }

   rope_type &= (RP_PULL_LEFT|RP_PULL_RIGHT);
   if (transrot->flags2 & F2_FLIP_H_DRAW)
   {
      if (rope_type == RP_PULL_LEFT)
         transrot->sub_state = 1;
   }
   else
   {
      if (rope_type == RP_PULL_RIGHT)
         transrot->sub_state = 1;
   }

   return(0);
}

/* * * * *
*
*  transrot_internal(part);
*
* * * * */
void transrot_internal(PART *transrot)
{
   short direction, transrot_link, other_tie, rope_action;
   short x,speed;
   long force;
   ROPE *rptr;
   PART *other_part,*pptr;

   const static char far state_array[] =
   {
      1,1,2,3,4,5,6,7
   };
   #define NUM_STATES   (sizeof(state_array)/sizeof(char))

   /* check for debouncing the device */
   if (transrot->sub_state)
   {
      /* animate the transrot */
      if (++transrot->work_var < NUM_STATES)
      {
         transrot->state = state_array[transrot->work_var] - 1;
         transrot_reinit(transrot);

         /* check if the pulley belt should turn and the bar should interact */
         if (transrot->state < 5)
         {
            /* Set push speed */
            speed = FOUR_PIX;

            /* set up the push interaction rectangle */
            if (transrot->flags2 & F2_FLIP_H_DRAW)
            {
               x = transrot->offset.x;
               speed *= -1;
            }
            else
            {
               x = transrot->offset.x + transrot->size.x;
            }

            /* interact with the other parts */
            tn_query_dist(transrot,F1_MOVE_L|F1_STATIC_L,x,0,1,15);
            pptr = transrot->qptr;
            while (pptr)
            {
               if (pptr->flags1 & F1_MOVE_L)
               {
                  pptr->speed.x += speed;
                  check_term_velocity(pptr);
               }
               else
                  generic_static_to_static_collide(transrot, pptr);

               pptr = pptr->qptr;
            }

            /* check if the pulley belt is attached to anything */
            /* NOTE: the order of operation here is important */
            if ((pptr=get_belt_link(transrot)) != 0)
            {
               if(transrot->state == 4)
                  pptr->sub_state = 0;

               /* check if the belt should move counterclockwise */
               else if (transrot->flags2 & F2_FLIP_H_DRAW)
               {
                  if (!(pptr->flags2 & F2_ROT_PROVIDE))
                     pptr->sub_state = -1;
               }
               else
               {
                  if (!(pptr->flags2 & F2_ROT_PROVIDE))
                     pptr->sub_state = 1;
               }
            }
         }

         /* if there is a rope, then tell the other end that it has been  */
         /* pulled */
         direction = MOVING_NEITHER;   /* not pulling up or down */

         /* check if there is a rope attached.  */
         if ((rptr = transrot->rope_tie[0]) != 0)
         {
            if (rptr->link1 == transrot)
            {
               transrot_link = 0;
               other_tie = rptr->l2_num;
            }
            else
            {
               transrot_link = 1;
               other_tie = rptr->l1_num;
            }
      
            force = (transrot->force > 0 ? transrot->force : -transrot->force);
            rope_action = get_rope_action(rptr, transrot_link, direction);
            other_part = get_rope_link(transrot,rptr);
            prop[other_part->type].rope_func(transrot,other_part,other_tie,
               rope_action,0,force);
         }
      }
      else
      {
         transrot->state = transrot->sub_state = transrot->work_var = 0;
      }
   }
}

/* * * * *
*
*  short collide_with_transrot(PART *transrot, PART *pptr);
*
*  This function will set the substate of the transrot and return true if the
*  pptr is overlapping the plungers. It is an extremely rough approximation of
*  a collision.
*
* * * * */
short collide_with_transrot(PART *transrot, PART *pptr)
{
   short x,y,w,h;
   short cx,cy,cw,ch;

   x = transrot->scrn_loc.x + transrot->offset.x;
   w = transrot->size.x;
   y = transrot->scrn_loc.y + transrot->offset.y;
   h = 15;
   cx = pptr->scrn_loc.x + pptr->offset.x;
   cw = pptr->size.x;
   cy = pptr->scrn_loc.y + pptr->offset.y;
   ch = pptr->size.y;

   /* check if the part is near the plunger */
   if ((cx + cw < x) || (x + w < cx) || (cy + ch < y) || (y + h < cy))
      return(0);

   if (  ((x + w/2 < cx)
      && !(transrot->flags2 & F2_FLIP_H_DRAW))
      || ((x + w/2 > cx)
      && (transrot->flags2 & F2_FLIP_H_DRAW)))
      transrot->sub_state = 1;

   return(1);
}



