
#include <string.h>
#include "vm_types.h"
#include "vm.h"
#include "vm2.h"


#define TIMER  1
#define SX     0

#if 0
/* Stubs for IM_PAL.ASM */
void vga2planes(void) {}
void read_palette(void) {}

/* Stubs for vm_timer */
#if TIMER
   short vm_init_timer(short r) {return(0);}
   short far vm_timer_insert ( void (*f)(), short b) { return(0); }
   short vm_timer_delete(short i) {return(0);}
   short vm_reset_timer(void) {}
   char  vm_timer_on;
   short vm_countdown;
#endif

/* Stubs for other misc. vm routines */
void vm_init_ovfl(void) {}
void vm_border(short c) {}
short vm2_scrnload(void *f) {return vm_scrnload(f);}
void set_ega(void) {}
void stub(void) {}

#endif


/* Misc system stubs */
short strncmpi(char *source, char *dest, short count)
{
   return strnicmp(source,dest,count);
}
#if 0
void delfile(void) {}
void setvect(void) {}
void volume_intr(void) {}
void mouse_stack(void) {}

/* Stubs for EMM.LIB */
/* Stubs for MOUSE2.ASM */
void mouse_speed(void) {}

/* Stubs for DONGLE.OBJ */
char *decrypt(void) {return(0);}
#endif

/* void my_emm_reset(void) {}
void my_emm_free(void *v) {vm_hfree(v);}
void *my_emm_malloc(long s, long f) {return vm_hmalloc(s,f);}
short my_emm_init(void) {return(0);}
short _OvrInitEms(void) {return(0);} */


/* Stubs for SX.LIB */
#if SX
   short sx_audio_driver;
   short sx_signal(void) {return(0);}
   void sx_master_vol(void) {}
   void sx_vol(void) {}
   void sx_fade(void) {}
   void sx_stop(void) {}
   void sx_start(void) {}
   void sx_free(void) {}
   void sx_load(void) {}
   void sx_reset(void) {}
   short sx_setup(void) {return(1);}
   short audChk(void) {return(0);}
   void audPlay(void) {}
   void audWPlay(void) {}
   void audSelect(void) {}
   void audStop(void) {}
   void audRate(void) {}
   void hdsRate(void) {}
#endif

/* Stubs for 3-space library */
static const short costab[] =
{
   0x4000,0x3fff,0x3fff,0x3fff,0x3fff,0x3fff,0x3fff,0x3fff,
   0x3ffe,0x3ffe,0x3ffe,0x3ffd,0x3ffd,0x3ffc,0x3ffc,0x3ffb,
   0x3ffb,0x3ffa,0x3ff9,0x3ff9,0x3ff8,0x3ff7,0x3ff6,0x3ff5,
   0x3ff4,0x3ff3,0x3ff2,0x3ff1,0x3ff0,0x3fef,0x3fee,0x3fed,
   0x3fec,0x3feb,0x3fe9,0x3fe8,0x3fe7,0x3fe5,0x3fe4,0x3fe2,
   0x3fe1,0x3fdf,0x3fde,0x3fdc,0x3fda,0x3fd8,0x3fd7,0x3fd5,
   0x3fd3,0x3fd1,0x3fcf,0x3fcd,0x3fcb,0x3fc9,0x3fc7,0x3fc5,
   0x3fc3,0x3fc1,0x3fbf,0x3fbc,0x3fba,0x3fb8,0x3fb5,0x3fb3,
   0x3fb1,0x3fae,0x3fac,0x3fa9,0x3fa6,0x3fa4,0x3fa1,0x3f9e,
   0x3f9c,0x3f99,0x3f96,0x3f93,0x3f90,0x3f8d,0x3f8a,0x3f87,
   0x3f84,0x3f81,0x3f7e,0x3f7b,0x3f78,0x3f74,0x3f71,0x3f6e,
   0x3f6a,0x3f67,0x3f64,0x3f60,0x3f5d,0x3f59,0x3f55,0x3f52,
   0x3f4e,0x3f4a,0x3f47,0x3f43,0x3f3f,0x3f3b,0x3f37,0x3f33,
   0x3f2f,0x3f2b,0x3f27,0x3f23,0x3f1f,0x3f1b,0x3f17,0x3f13,
   0x3f0e,0x3f0a,0x3f06,0x3f01,0x3efd,0x3ef8,0x3ef4,0x3eef,
   0x3eeb,0x3ee6,0x3ee1,0x3edd,0x3ed8,0x3ed3,0x3ece,0x3eca,
   0x3ec5,0x3ec0,0x3ebb,0x3eb6,0x3eb1,0x3eac,0x3ea7,0x3ea1,
   0x3e9c,0x3e97,0x3e92,0x3e8c,0x3e87,0x3e82,0x3e7c,0x3e77,
   0x3e71,0x3e6c,0x3e66,0x3e61,0x3e5b,0x3e55,0x3e50,0x3e4a,
   0x3e44,0x3e3e,0x3e38,0x3e33,0x3e2d,0x3e27,0x3e21,0x3e1b,
   0x3e14,0x3e0e,0x3e08,0x3e02,0x3dfc,0x3df5,0x3def,0x3de9,
   0x3de2,0x3ddc,0x3dd6,0x3dcf,0x3dc9,0x3dc2,0x3dbb,0x3db5,
   0x3dae,0x3da7,0x3da1,0x3d9a,0x3d93,0x3d8c,0x3d85,0x3d7e,
   0x3d77,0x3d70,0x3d69,0x3d62,0x3d5b,0x3d54,0x3d4d,0x3d45,
   0x3d3e,0x3d37,0x3d2f,0x3d28,0x3d21,0x3d19,0x3d12,0x3d0a,
   0x3d02,0x3cfb,0x3cf3,0x3cec,0x3ce4,0x3cdc,0x3cd4,0x3ccc,
   0x3cc5,0x3cbd,0x3cb5,0x3cad,0x3ca5,0x3c9d,0x3c95,0x3c8c,
   0x3c84,0x3c7c,0x3c74,0x3c6c,0x3c63,0x3c5b,0x3c53,0x3c4a,
   0x3c42,0x3c39,0x3c31,0x3c28,0x3c20,0x3c17,0x3c0e,0x3c06,
   0x3bfd,0x3bf4,0x3beb,0x3be2,0x3bda,0x3bd1,0x3bc8,0x3bbf,
   0x3bb6,0x3bad,0x3ba3,0x3b9a,0x3b91,0x3b88,0x3b7f,0x3b75,
   0x3b6c,0x3b63,0x3b59,0x3b50,0x3b47,0x3b3d,0x3b34,0x3b2a,
   0x3b20,0x3b17,0x3b0d,0x3b03,0x3afa,0x3af0,0x3ae6,0x3adc,
   0x3ad2,0x3ac8,0x3abe,0x3ab4,0x3aaa,0x3aa0,0x3a96,0x3a8c,
   0x3a82,0x3a78,0x3a6d,0x3a63,0x3a59,0x3a4f,0x3a44,0x3a3a,
   0x3a2f,0x3a25,0x3a1a,0x3a10,0x3a05,0x39fb,0x39f0,0x39e5,
   0x39da,0x39d0,0x39c5,0x39ba,0x39af,0x39a4,0x3999,0x398e,
   0x3983,0x3978,0x396d,0x3962,0x3957,0x394c,0x3941,0x3935,
   0x392a,0x391f,0x3913,0x3908,0x38fd,0x38f1,0x38e6,0x38da,
   0x38cf,0x38c3,0x38b7,0x38ac,0x38a0,0x3894,0x3889,0x387d,
   0x3871,0x3865,0x3859,0x384d,0x3841,0x3835,0x3829,0x381d,
   0x3811,0x3805,0x37f9,0x37ed,0x37e0,0x37d4,0x37c8,0x37bb,
   0x37af,0x37a3,0x3796,0x378a,0x377d,0x3771,0x3764,0x3757,
   0x374b,0x373e,0x3731,0x3725,0x3718,0x370b,0x36fe,0x36f1,
   0x36e5,0x36d8,0x36cb,0x36be,0x36b1,0x36a4,0x3696,0x3689,
   0x367c,0x366f,0x3662,0x3654,0x3647,0x363a,0x362c,0x361f,
   0x3612,0x3604,0x35f7,0x35e9,0x35dc,0x35ce,0x35c0,0x35b3,
   0x35a5,0x3597,0x3589,0x357c,0x356e,0x3560,0x3552,0x3544,
   0x3536,0x3528,0x351a,0x350c,0x34fe,0x34f0,0x34e2,0x34d4,
   0x34c6,0x34b7,0x34a9,0x349b,0x348c,0x347e,0x3470,0x3461,
   0x3453,0x3444,0x3436,0x3427,0x3419,0x340a,0x33fb,0x33ed,
   0x33de,0x33cf,0x33c1,0x33b2,0x33a3,0x3394,0x3385,0x3376,
   0x3367,0x3358,0x3349,0x333a,0x332b,0x331c,0x330d,0x32fe,
   0x32ee,0x32df,0x32d0,0x32c1,0x32b1,0x32a2,0x3293,0x3283,
   0x3274,0x3264,0x3255,0x3245,0x3236,0x3226,0x3216,0x3207,
   0x31f7,0x31e7,0x31d8,0x31c8,0x31b8,0x31a8,0x3198,0x3188,
   0x3179,0x3169,0x3159,0x3149,0x3138,0x3128,0x3118,0x3108,
   0x30f8,0x30e8,0x30d8,0x30c7,0x30b7,0x30a7,0x3096,0x3086,
   0x3076,0x3065,0x3055,0x3044,0x3034,0x3023,0x3013,0x3002,
   0x2ff1,0x2fe1,0x2fd0,0x2fbf,0x2faf,0x2f9e,0x2f8d,0x2f7c,
   0x2f6b,0x2f5a,0x2f49,0x2f38,0x2f28,0x2f16,0x2f05,0x2ef4,
   0x2ee3,0x2ed2,0x2ec1,0x2eb0,0x2e9f,0x2e8d,0x2e7c,0x2e6b,
   0x2e5a,0x2e48,0x2e37,0x2e25,0x2e14,0x2e03,0x2df1,0x2de0,
   0x2dce,0x2dbc,0x2dab,0x2d99,0x2d88,0x2d76,0x2d64,0x2d52,
   0x2d41,0x2d2f,0x2d1d,0x2d0b,0x2cf9,0x2ce8,0x2cd6,0x2cc4,
   0x2cb2,0x2ca0,0x2c8e,0x2c7c,0x2c6a,0x2c57,0x2c45,0x2c33,
   0x2c21,0x2c0f,0x2bfc,0x2bea,0x2bd8,0x2bc6,0x2bb3,0x2ba1,
   0x2b8e,0x2b7c,0x2b6a,0x2b57,0x2b45,0x2b32,0x2b20,0x2b0d,
   0x2afa,0x2ae8,0x2ad5,0x2ac2,0x2ab0,0x2a9d,0x2a8a,0x2a77,
   0x2a65,0x2a52,0x2a3f,0x2a2c,0x2a19,0x2a06,0x29f3,0x29e0,
   0x29cd,0x29ba,0x29a7,0x2994,0x2981,0x296e,0x295a,0x2947,
   0x2934,0x2921,0x290e,0x28fa,0x28e7,0x28d4,0x28c0,0x28ad,
   0x2899,0x2886,0x2872,0x285f,0x284b,0x2838,0x2824,0x2811,
   0x27fd,0x27ea,0x27d6,0x27c2,0x27af,0x279b,0x2787,0x2773,
   0x275f,0x274c,0x2738,0x2724,0x2710,0x26fc,0x26e8,0x26d4,
   0x26c0,0x26ac,0x2698,0x2684,0x2670,0x265c,0x2648,0x2634,
   0x261f,0x260b,0x25f7,0x25e3,0x25cf,0x25ba,0x25a6,0x2592,
   0x257d,0x2569,0x2554,0x2540,0x252c,0x2517,0x2503,0x24ee,
   0x24da,0x24c5,0x24b0,0x249c,0x2487,0x2473,0x245e,0x2449,
   0x2434,0x2420,0x240b,0x23f6,0x23e1,0x23cd,0x23b8,0x23a3,
   0x238e,0x2379,0x2364,0x234f,0x233a,0x2325,0x2310,0x22fb,
   0x22e6,0x22d1,0x22bc,0x22a7,0x2292,0x227d,0x2267,0x2252,
   0x223d,0x2228,0x2212,0x21fd,0x21e8,0x21d2,0x21bd,0x21a8,
   0x2192,0x217d,0x2168,0x2152,0x213d,0x2127,0x2112,0x20fc,
   0x20e7,0x20d1,0x20bb,0x20a6,0x2090,0x207b,0x2065,0x204f,
   0x2039,0x2024,0x200e,0x1ff8,0x1fe2,0x1fcd,0x1fb7,0x1fa1,
   0x1f8b,0x1f75,0x1f5f,0x1f49,0x1f34,0x1f1e,0x1f08,0x1ef2,
   0x1edc,0x1ec6,0x1eb0,0x1e99,0x1e83,0x1e6d,0x1e57,0x1e41,
   0x1e2b,0x1e15,0x1dfe,0x1de8,0x1dd2,0x1dbc,0x1da6,0x1d8f,
   0x1d79,0x1d63,0x1d4c,0x1d36,0x1d20,0x1d09,0x1cf3,0x1cdc,
   0x1cc6,0x1caf,0x1c99,0x1c83,0x1c6c,0x1c55,0x1c3f,0x1c28,
   0x1c12,0x1bfb,0x1be5,0x1bce,0x1bb7,0x1ba1,0x1b8a,0x1b73,
   0x1b5d,0x1b46,0x1b2f,0x1b18,0x1b02,0x1aeb,0x1ad4,0x1abd,
   0x1aa6,0x1a8f,0x1a79,0x1a62,0x1a4b,0x1a34,0x1a1d,0x1a06,
   0x19ef,0x19d8,0x19c1,0x19aa,0x1993,0x197c,0x1965,0x194e,
   0x1937,0x1920,0x1908,0x18f1,0x18da,0x18c3,0x18ac,0x1895,
   0x187d,0x1866,0x184f,0x1838,0x1820,0x1809,0x17f2,0x17da,
   0x17c3,0x17ac,0x1794,0x177d,0x1766,0x174e,0x1737,0x171f,
   0x1708,0x16f1,0x16d9,0x16c2,0x16aa,0x1693,0x167b,0x1664,
   0x164c,0x1634,0x161d,0x1605,0x15ee,0x15d6,0x15be,0x15a7,
   0x158f,0x1577,0x1560,0x1548,0x1530,0x1519,0x1501,0x14e9,
   0x14d1,0x14ba,0x14a2,0x148a,0x1472,0x145a,0x1443,0x142b,
   0x1413,0x13fb,0x13e3,0x13cb,0x13b3,0x139b,0x1383,0x136c,
   0x1354,0x133c,0x1324,0x130c,0x12f4,0x12dc,0x12c4,0x12ac,
   0x1294,0x127b,0x1263,0x124b,0x1233,0x121b,0x1203,0x11eb,
   0x11d3,0x11bb,0x11a2,0x118a,0x1172,0x115a,0x1142,0x112a,
   0x1111,0x10f9,0x10e1,0x10c9,0x10b0,0x1098,0x1080,0x1068,
   0x104f,0x1037,0x101f,0x1006,0x0fee,0x0fd6,0x0fbd,0x0fa5,
   0x0f8c,0x0f74,0x0f5c,0x0f43,0x0f2b,0x0f12,0x0efa,0x0ee2,
   0x0ec9,0x0eb1,0x0e98,0x0e80,0x0e67,0x0e4f,0x0e36,0x0e1e,
   0x0e05,0x0ded,0x0dd4,0x0dbc,0x0da3,0x0d8b,0x0d72,0x0d59,
   0x0d41,0x0d28,0x0d10,0x0cf7,0x0cde,0x0cc6,0x0cad,0x0c95,
   0x0c7c,0x0c63,0x0c4b,0x0c32,0x0c19,0x0c01,0x0be8,0x0bcf,
   0x0bb6,0x0b9e,0x0b85,0x0b6c,0x0b54,0x0b3b,0x0b22,0x0b09,
   0x0af1,0x0ad8,0x0abf,0x0aa6,0x0a8d,0x0a75,0x0a5c,0x0a43,
   0x0a2a,0x0a11,0x09f9,0x09e0,0x09c7,0x09ae,0x0995,0x097c,
   0x0964,0x094b,0x0932,0x0919,0x0900,0x08e7,0x08ce,0x08b5,
   0x089c,0x0884,0x086b,0x0852,0x0839,0x0820,0x0807,0x07ee,
   0x07d5,0x07bc,0x07a3,0x078a,0x0771,0x0758,0x073f,0x0726,
   0x070d,0x06f4,0x06db,0x06c2,0x06a9,0x0690,0x0677,0x065e,
   0x0645,0x062c,0x0613,0x05fa,0x05e1,0x05c8,0x05af,0x0596,
   0x057d,0x0564,0x054b,0x0532,0x0519,0x0500,0x04e7,0x04ce,
   0x04b5,0x049c,0x0483,0x046a,0x0451,0x0437,0x041e,0x0405,
   0x03ec,0x03d3,0x03ba,0x03a1,0x0388,0x036f,0x0356,0x033d,
   0x0323,0x030a,0x02f1,0x02d8,0x02bf,0x02a6,0x028d,0x0274,
   0x025b,0x0241,0x0228,0x020f,0x01f6,0x01dd,0x01c4,0x01ab,
   0x0192,0x0178,0x015f,0x0146,0x012d,0x0114,0x00fb,0x00e2,
   0x00c9,0x00af,0x0096,0x007d,0x0064,0x004b,0x0032,0x0019,
   0x0000,0xffe6,0xffcd,0xffb4,0xff9b,0xff82,0xff69,0xff50,
   0xff36,0xff1d,0xff04,0xfeeb,0xfed2,0xfeb9,0xfea0,0xfe87,
   0xfe6d,0xfe54,0xfe3b,0xfe22,0xfe09,0xfdf0,0xfdd7,0xfdbe,
   0xfda4,0xfd8b,0xfd72,0xfd59,0xfd40,0xfd27,0xfd0e,0xfcf5,
   0xfcdc,0xfcc2,0xfca9,0xfc90,0xfc77,0xfc5e,0xfc45,0xfc2c,
   0xfc13,0xfbfa,0xfbe1,0xfbc8,0xfbae,0xfb95,0xfb7c,0xfb63,
   0xfb4a,0xfb31,0xfb18,0xfaff,0xfae6,0xfacd,0xfab4,0xfa9b,
   0xfa82,0xfa69,0xfa50,0xfa37,0xfa1e,0xfa05,0xf9ec,0xf9d3,
   0xf9ba,0xf9a1,0xf988,0xf96f,0xf956,0xf93d,0xf924,0xf90b,
   0xf8f2,0xf8d9,0xf8c0,0xf8a7,0xf88e,0xf875,0xf85c,0xf843,
   0xf82a,0xf811,0xf7f8,0xf7df,0xf7c6,0xf7ad,0xf794,0xf77b,
   0xf763,0xf74a,0xf731,0xf718,0xf6ff,0xf6e6,0xf6cd,0xf6b4,
   0xf69b,0xf683,0xf66a,0xf651,0xf638,0xf61f,0xf606,0xf5ee,
   0xf5d5,0xf5bc,0xf5a3,0xf58a,0xf572,0xf559,0xf540,0xf527,
   0xf50e,0xf4f6,0xf4dd,0xf4c4,0xf4ab,0xf493,0xf47a,0xf461,
   0xf449,0xf430,0xf417,0xf3fe,0xf3e6,0xf3cd,0xf3b4,0xf39c,
   0xf383,0xf36a,0xf352,0xf339,0xf321,0xf308,0xf2ef,0xf2d7,
   0xf2be,0xf2a6,0xf28d,0xf274,0xf25c,0xf243,0xf22b,0xf212,
   0xf1fa,0xf1e1,0xf1c9,0xf1b0,0xf198,0xf17f,0xf167,0xf14e,
   0xf136,0xf11d,0xf105,0xf0ed,0xf0d4,0xf0bc,0xf0a3,0xf08b,
   0xf073,0xf05a,0xf042,0xf029,0xf011,0xeff9,0xefe0,0xefc8,
   0xefb0,0xef97,0xef7f,0xef67,0xef4f,0xef36,0xef1e,0xef06,
   0xeeee,0xeed5,0xeebd,0xeea5,0xee8d,0xee75,0xee5d,0xee44,
   0xee2c,0xee14,0xedfc,0xede4,0xedcc,0xedb4,0xed9c,0xed84,
   0xed6b,0xed53,0xed3b,0xed23,0xed0b,0xecf3,0xecdb,0xecc3,
   0xecab,0xec93,0xec7c,0xec64,0xec4c,0xec34,0xec1c,0xec04,
   0xebec,0xebd4,0xebbc,0xeba5,0xeb8d,0xeb75,0xeb5d,0xeb45,
   0xeb2e,0xeb16,0xeafe,0xeae6,0xeacf,0xeab7,0xea9f,0xea88,
   0xea70,0xea58,0xea41,0xea29,0xea11,0xe9fa,0xe9e2,0xe9cb,
   0xe9b3,0xe99b,0xe984,0xe96c,0xe955,0xe93d,0xe926,0xe90e,
   0xe8f7,0xe8e0,0xe8c8,0xe8b1,0xe899,0xe882,0xe86b,0xe853,
   0xe83c,0xe825,0xe80d,0xe7f6,0xe7df,0xe7c7,0xe7b0,0xe799,
   0xe782,0xe76a,0xe753,0xe73c,0xe725,0xe70e,0xe6f7,0xe6df,
   0xe6c8,0xe6b1,0xe69a,0xe683,0xe66c,0xe655,0xe63e,0xe627,
   0xe610,0xe5f9,0xe5e2,0xe5cb,0xe5b4,0xe59d,0xe586,0xe570,
   0xe559,0xe542,0xe52b,0xe514,0xe4fd,0xe4e7,0xe4d0,0xe4b9,
   0xe4a2,0xe48c,0xe475,0xe45e,0xe448,0xe431,0xe41a,0xe404,
   0xe3ed,0xe3d7,0xe3c0,0xe3aa,0xe393,0xe37c,0xe366,0xe350,
   0xe339,0xe323,0xe30c,0xe2f6,0xe2df,0xe2c9,0xe2b3,0xe29c,
   0xe286,0xe270,0xe259,0xe243,0xe22d,0xe217,0xe201,0xe1ea,
   0xe1d4,0xe1be,0xe1a8,0xe192,0xe17c,0xe166,0xe14f,0xe139,
   0xe123,0xe10d,0xe0f7,0xe0e1,0xe0cb,0xe0b6,0xe0a0,0xe08a,
   0xe074,0xe05e,0xe048,0xe032,0xe01d,0xe007,0xdff1,0xdfdb,
   0xdfc6,0xdfb0,0xdf9a,0xdf84,0xdf6f,0xdf59,0xdf44,0xdf2e,
   0xdf18,0xdf03,0xdeed,0xded8,0xdec2,0xdead,0xde97,0xde82,
   0xde6d,0xde57,0xde42,0xde2d,0xde17,0xde02,0xdded,0xddd7,
   0xddc2,0xddad,0xdd98,0xdd82,0xdd6d,0xdd58,0xdd43,0xdd2e,
   0xdd19,0xdd04,0xdcef,0xdcda,0xdcc5,0xdcb0,0xdc9b,0xdc86,
   0xdc71,0xdc5c,0xdc47,0xdc32,0xdc1e,0xdc09,0xdbf4,0xdbdf,
   0xdbcb,0xdbb6,0xdba1,0xdb8c,0xdb78,0xdb63,0xdb4f,0xdb3a,
   0xdb25,0xdb11,0xdafc,0xdae8,0xdad3,0xdabf,0xdaab,0xda96,
   0xda82,0xda6d,0xda59,0xda45,0xda30,0xda1c,0xda08,0xd9f4,
   0xd9e0,0xd9cb,0xd9b7,0xd9a3,0xd98f,0xd97b,0xd967,0xd953,
   0xd93f,0xd92b,0xd917,0xd903,0xd8ef,0xd8db,0xd8c7,0xd8b3,
   0xd8a0,0xd88c,0xd878,0xd864,0xd850,0xd83d,0xd829,0xd815,
   0xd802,0xd7ee,0xd7db,0xd7c7,0xd7b4,0xd7a0,0xd78d,0xd779,
   0xd766,0xd752,0xd73f,0xd72b,0xd718,0xd705,0xd6f1,0xd6de,
   0xd6cb,0xd6b8,0xd6a5,0xd691,0xd67e,0xd66b,0xd658,0xd645,
   0xd632,0xd61f,0xd60c,0xd5f9,0xd5e6,0xd5d3,0xd5c0,0xd5ad,
   0xd59a,0xd588,0xd575,0xd562,0xd54f,0xd53d,0xd52a,0xd517,
   0xd505,0xd4f2,0xd4df,0xd4cd,0xd4ba,0xd4a8,0xd495,0xd483,
   0xd471,0xd45e,0xd44c,0xd439,0xd427,0xd415,0xd403,0xd3f0,
   0xd3de,0xd3cc,0xd3ba,0xd3a8,0xd395,0xd383,0xd371,0xd35f,
   0xd34d,0xd33b,0xd329,0xd317,0xd306,0xd2f4,0xd2e2,0xd2d0,
   0xd2be,0xd2ad,0xd29b,0xd289,0xd277,0xd266,0xd254,0xd243,
   0xd231,0xd21f,0xd20e,0xd1fc,0xd1eb,0xd1da,0xd1c8,0xd1b7,
   0xd1a5,0xd194,0xd183,0xd172,0xd160,0xd14f,0xd13e,0xd12d,
   0xd11c,0xd10b,0xd0fa,0xd0e9,0xd0d7,0xd0c7,0xd0b6,0xd0a5,
   0xd094,0xd083,0xd072,0xd061,0xd050,0xd040,0xd02f,0xd01e,
   0xd00e,0xcffd,0xcfec,0xcfdc,0xcfcb,0xcfbb,0xcfaa,0xcf9a,
   0xcf89,0xcf79,0xcf69,0xcf58,0xcf48,0xcf38,0xcf27,0xcf17,
   0xcf07,0xcef7,0xcee7,0xced7,0xcec7,0xceb6,0xcea6,0xce96,
   0xce86,0xce77,0xce67,0xce57,0xce47,0xce37,0xce27,0xce18,
   0xce08,0xcdf8,0xcde9,0xcdd9,0xcdc9,0xcdba,0xcdaa,0xcd9b,
   0xcd8b,0xcd7c,0xcd6c,0xcd5d,0xcd4e,0xcd3e,0xcd2f,0xcd20,
   0xcd11,0xcd01,0xccf2,0xcce3,0xccd4,0xccc5,0xccb6,0xcca7,
   0xcc98,0xcc89,0xcc7a,0xcc6b,0xcc5c,0xcc4d,0xcc3e,0xcc30,
   0xcc21,0xcc12,0xcc04,0xcbf5,0xcbe6,0xcbd8,0xcbc9,0xcbbb,
   0xcbac,0xcb9e,0xcb8f,0xcb81,0xcb73,0xcb64,0xcb56,0xcb48,
   0xcb39,0xcb2b,0xcb1d,0xcb0f,0xcb01,0xcaf3,0xcae5,0xcad7,
   0xcac9,0xcabb,0xcaad,0xca9f,0xca91,0xca83,0xca76,0xca68,
   0xca5a,0xca4c,0xca3f,0xca31,0xca23,0xca16,0xca08,0xc9fb,
   0xc9ed,0xc9e0,0xc9d3,0xc9c5,0xc9b8,0xc9ab,0xc99d,0xc990,
   0xc983,0xc976,0xc969,0xc95b,0xc94e,0xc941,0xc934,0xc927,
   0xc91a,0xc90e,0xc901,0xc8f4,0xc8e7,0xc8da,0xc8ce,0xc8c1,
   0xc8b4,0xc8a8,0xc89b,0xc88e,0xc882,0xc875,0xc869,0xc85c,
   0xc850,0xc844,0xc837,0xc82b,0xc81f,0xc812,0xc806,0xc7fa,
   0xc7ee,0xc7e2,0xc7d6,0xc7ca,0xc7be,0xc7b2,0xc7a6,0xc79a,
   0xc78e,0xc782,0xc776,0xc76b,0xc75f,0xc753,0xc748,0xc73c,
   0xc730,0xc725,0xc719,0xc70e,0xc702,0xc6f7,0xc6ec,0xc6e0,
   0xc6d5,0xc6ca,0xc6be,0xc6b3,0xc6a8,0xc69d,0xc692,0xc687,
   0xc67c,0xc671,0xc666,0xc65b,0xc650,0xc645,0xc63a,0xc62f,
   0xc625,0xc61a,0xc60f,0xc604,0xc5fa,0xc5ef,0xc5e5,0xc5da,
   0xc5d0,0xc5c5,0xc5bb,0xc5b0,0xc5a6,0xc59c,0xc592,0xc587,
   0xc57d,0xc573,0xc569,0xc55f,0xc555,0xc54b,0xc541,0xc537,
   0xc52d,0xc523,0xc519,0xc50f,0xc505,0xc4fc,0xc4f2,0xc4e8,
   0xc4df,0xc4d5,0xc4cb,0xc4c2,0xc4b8,0xc4af,0xc4a6,0xc49c,
   0xc493,0xc48a,0xc480,0xc477,0xc46e,0xc465,0xc45c,0xc452,
   0xc449,0xc440,0xc437,0xc42e,0xc425,0xc41d,0xc414,0xc40b,
   0xc402,0xc3f9,0xc3f1,0xc3e8,0xc3df,0xc3d7,0xc3ce,0xc3c6,
   0xc3bd,0xc3b5,0xc3ac,0xc3a4,0xc39c,0xc393,0xc38b,0xc383,
   0xc37b,0xc373,0xc36a,0xc362,0xc35a,0xc352,0xc34a,0xc342,
   0xc33a,0xc333,0xc32b,0xc323,0xc31b,0xc313,0xc30c,0xc304,
   0xc2fd,0xc2f5,0xc2ed,0xc2e6,0xc2de,0xc2d7,0xc2d0,0xc2c8,
   0xc2c1,0xc2ba,0xc2b2,0xc2ab,0xc2a4,0xc29d,0xc296,0xc28f,
   0xc288,0xc281,0xc27a,0xc273,0xc26c,0xc265,0xc25e,0xc258,
   0xc251,0xc24a,0xc244,0xc23d,0xc236,0xc230,0xc229,0xc223,
   0xc21d,0xc216,0xc210,0xc20a,0xc203,0xc1fd,0xc1f7,0xc1f1,
   0xc1eb,0xc1e4,0xc1de,0xc1d8,0xc1d2,0xc1cc,0xc1c7,0xc1c1,
   0xc1bb,0xc1b5,0xc1af,0xc1aa,0xc1a4,0xc19e,0xc199,0xc193,
   0xc18e,0xc188,0xc183,0xc17d,0xc178,0xc173,0xc16d,0xc168,
   0xc163,0xc15e,0xc158,0xc153,0xc14e,0xc149,0xc144,0xc13f,
   0xc13a,0xc135,0xc131,0xc12c,0xc127,0xc122,0xc11e,0xc119,
   0xc114,0xc110,0xc10b,0xc107,0xc102,0xc0fe,0xc0f9,0xc0f5,
   0xc0f1,0xc0ec,0xc0e8,0xc0e4,0xc0e0,0xc0dc,0xc0d8,0xc0d4,
   0xc0d0,0xc0cc,0xc0c8,0xc0c4,0xc0c0,0xc0bc,0xc0b8,0xc0b5,
   0xc0b1,0xc0ad,0xc0aa,0xc0a6,0xc0a2,0xc09f,0xc09b,0xc098,
   0xc095,0xc091,0xc08e,0xc08b,0xc087,0xc084,0xc081,0xc07e,
   0xc07b,0xc078,0xc075,0xc072,0xc06f,0xc06c,0xc069,0xc066,
   0xc063,0xc061,0xc05e,0xc05b,0xc059,0xc056,0xc053,0xc051,
   0xc04e,0xc04c,0xc04a,0xc047,0xc045,0xc043,0xc040,0xc03e,
   0xc03c,0xc03a,0xc038,0xc036,0xc034,0xc032,0xc030,0xc02e,
   0xc02c,0xc02a,0xc028,0xc027,0xc025,0xc023,0xc021,0xc020,
   0xc01e,0xc01d,0xc01b,0xc01a,0xc018,0xc017,0xc016,0xc014,
   0xc013,0xc012,0xc011,0xc010,0xc00f,0xc00e,0xc00d,0xc00c,
   0xc00b,0xc00a,0xc009,0xc008,0xc007,0xc006,0xc006,0xc005,
   0xc004,0xc004,0xc003,0xc003,0xc002,0xc002,0xc001,0xc001,
   0xc001,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,
   0xc000
};
short ts_cos(short angle)
{
   angle = (unsigned short)angle >> 4;
   if(angle >= 0x800)
      angle = (0x1000-angle);
   return(costab[angle]);
}
short ts_sin(short angle)
{
   return ts_cos(angle + 0xc000);
}
#define MAX_INDEX 512
static short get_angle(short index);
/* Three space table */
static const long ts_ang[] = {
   0,1,2,3,5,6,7,8,
   10,11,12,14,15,16,17,19,
   20,21,22,24,25,26,27,29,
   30,31,33,34,35,36,38,39,
   40,41,43,44,45,47,48,49,
   50,52,53,54,55,57,58,59,
   60,62,63,64,65,67,68,69,
   71,72,73,74,76,77,78,79,
   81,82,83,84,86,87,88,89,
   91,92,93,94,96,97,98,99,
   101,102,103,104,106,107,108,109,
   110,112,113,114,115,117,118,119,
   120,122,123,124,125,126,128,129,
   130,131,133,134,135,136,137,139,
   140,141,142,144,145,146,147,148,
   150,151,152,153,154,156,157,158,
   159,160,162,163,164,165,166,168,
   169,170,171,172,174,175,176,177,
   178,179,181,182,183,184,185,186,
   188,189,190,191,192,193,195,196,
   197,198,199,200,202,203,204,205,
   206,207,208,210,211,212,213,214,
   215,216,218,219,220,221,222,223,
   224,226,227,228,229,230,231,232,
   233,234,236,237,238,239,240,241,
   242,243,244,246,247,248,249,250,
   251,252,253,254,255,257,258,259,
   260,261,262,263,264,265,266,267,
   268,269,270,272,273,274,275,276,
   277,278,279,280,281,282,283,284,
   285,286,287,288,289,290,291,293,
   294,295,296,297,298,299,300,301,
   302,303,304,305,306,307,308,309,
   310,311,312,313,314,315,316,317,
   318,319,320,321,322,323,324,325,
   326,327,328,329,330,331,332,333,
   334,334,335,336,337,338,339,340,
   341,342,343,344,345,346,347,348,
   349,350,351,352,353,353,354,355,
   356,357,358,359,360,361,362,363,
   364,365,365,366,367,368,369,370,
   371,372,373,374,375,375,376,377,
   378,379,380,381,382,383,383,384,
   385,386,387,388,389,390,390,391,
   392,393,394,395,396,396,397,398,
   399,400,401,402,402,403,404,405,
   406,407,407,408,409,410,411,412,
   412,413,414,415,416,417,417,418,
   419,420,421,421,422,423,424,425,
   425,426,427,428,429,429,430,431,
   432,433,433,434,435,436,437,437,
   438,439,440,440,441,442,443,444,
   444,445,446,447,447,448,449,450,
   450,451,452,453,453,454,455,456,
   456,457,458,459,459,460,461,462,
   462,463,464,464,465,466,467,467,
   468,469,470,470,471,472,472,473,
   474,475,475,476,477,477,478,479,
   479,480,481,482,482,483,484,484,
   485,486,486,487,488,488,489,490,
   490,491,492,493,493,494,495,495,
   496,497,497,498,499,499,500,500,
   501,502,502,503,504,504,505,506,
   506,507,508,508,509,510,510,511
};

/*********************************
** short angle_to (long dx, long dy)
**
** Description:
**    Tim's angle_to based on a delta x and
** delta y. Uses get_angle.
****************************************/
short angle_to (long dx,long dy)
{
   char sign_x, sign_y;
   short angle;

   sign_x = (char) (dx < 0);
   if (sign_x)
      dx = -dx;
   sign_y = (char) (dy < 0);
   if (sign_y)
      dy = -dy;

   if (dx == 0)
      angle = 1024;
   else if (dy == 0)
      angle = 0;
   else if (dx == dy)
      angle = 512;
   else if (dx < dy)
      angle = 1024 - get_angle ((short)((dx * 512L) / dy));
   else /* if (dx > dy) */
      angle = get_angle ((short)((dy * 512L) / dx));

   /* adjust for quadrant */
   if (sign_x)
      angle = 2048 - angle;
   if (sign_y)
      angle = 4096 - angle;

   angle -= 1024; /* adjust for up is 0 */
   return (angle << 4);
}
/*********************************
** short get_angle(short index)
**
** Description:
**    Uses a lookup table to return an
** angle based on a 4096 quadrant.
****************************************/
static short get_angle(short index)
{
	short ret = 0;
	if (index < MAX_INDEX)
		ret = (short)ts_ang[index];
	return(ret);
}


