/* * * * *
*
*  TN_DRAGN.C
*
*  This module contains all the code associated with the dragon part.
*
*  By Chris Cole -- (c) 1993 Dynamix Software Development, Inc.
*
*  Modification History:
*  ---------------------
*  05/22/93 ChrisC   File created
*
* * * * */
#include "vm.h"
#include "tim.h"

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                            *
*                                   DRAGON                                   *
*                                                                            *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

/* ANIMATION
        The dragon spews fire toward the left. The sequence is:
   2,3,4,2,3,4,2,3,4,5,6,7,8,9,10,11,9,7,8,10,11,10,7,8,10,11,10,1,1,1,1,1,
   1,1,1,6,6,6.
        The resting state is supershape #1.
        The rectange of the dragon's fire is offset (-100,-4) from the root 
   to the top-corner of the 77 by 24 rectangle starting at supershape
   #7 and ending a supershape #1.
*/


/* supershape structure definition */
static F_SSHAPE_C dragon1 = {0, DRAGON_PLANE, {0,255,255,255},
   {{0,0},{0,0},{0,0},{0,0}}};
static F_SSHAPE_C dragon2 = {0, DRAGON_PLANE, {1,255,255,255},
   {{-1,-8},{0,0},{0,0},{0,0}}};
static F_SSHAPE_C dragon3 = {0, DRAGON_PLANE, {1,255,255,255},
   {{0,-8},{0,0},{0,0},{0,0}}};
static F_SSHAPE_C dragon4 = {0, DRAGON_PLANE, {1,255,255,255},
   {{-1,-8},{0,0},{0,0},{0,0}}};
static F_SSHAPE_C dragon5 = {0, DRAGON_PLANE, {5,255,255,255},
   {{-1,-1},{0,0},{0,0},{0,0}}};
static F_SSHAPE_C dragon6 = {0, DRAGON_PLANE, {6,255,255,255},
   {{-7,0},{0,0},{0,0},{0,0}}};
static F_SSHAPE_C dragon7 = {0, DRAGON_PLANE, {2,3,7,255},
   {{-16,-2},{-34,2},{-23,-2},{0,0}}};
static F_SSHAPE_C dragon8 = {0, DRAGON_PLANE, {2,4,8,255},
   {{-16,-2},{-33,1},{-23,-3},{0,0}}};
static F_SSHAPE_C dragon9 = {0, DRAGON_PLANE, {2,11,9,255},
   {{-16,-1},{-50,0},{-32,-5},{0,0}}};
static F_SSHAPE_C dragon10 = {0, DRAGON_PLANE, {2,12,10,255},
   {{-16,-2},{-44,-1},{-31,-5},{0,0}}};
static F_SSHAPE_C dragon11_2 = {0, DRAGON_PLANE1, {9,255,255,255},
   {{-32,-6},{0,0},{0,0},{0,0}}};
static F_SSHAPE_C dragon11 = {&dragon11_2, DRAGON_PLANE, {2,11,10,12},
   {{-17,-2},{-50,-1},{-34,-6},{-45,-2}}};

/* supershape table definition */
PC_SSHAPE_C far dragon_ss_tab[DRAGON_NUM_STATES] = 
   {&dragon1,&dragon2,&dragon3,&dragon4,&dragon5,&dragon6,
    &dragon7,&dragon8,&dragon9,&dragon10,&dragon11};

/* size. */
TIM_VEC_C far dragon_size[DRAGON_NUM_STATES] = 
   {{16,13},{18,21},{18,21},{18,21},{17,14},{23,13},
    {49,14},{48,15},{65,18},{59,17},{65,19}};

/* erase rectangle coordinate */
TIM_SCVEC_C far dragon_os[DRAGON_NUM_STATES] = 
   {{0,0},{-1,-17},{0,-17},{-2,-17},{-2,-2},{-14,-1},{-68,-4},{-65,-6},
    {-99,-11},{-87,-10},{-100,-13}};

/* border definitions. */
static PART_BORDER_C far dragon1_bord[DRAGON_BORDERS] =
   {{6,0,0},{15,10,0},{4,12,0},{0,10,0},
    {0,4,0}};

/* border tables */
PC_PART_BORDER_C far dragon_bord_tab[DRAGON_NUM_STATES] =
   {dragon1_bord,dragon1_bord,dragon1_bord,dragon1_bord,
    dragon1_bord,dragon1_bord,dragon1_bord,dragon1_bord,
    dragon1_bord,dragon1_bord,dragon1_bord};
P_PART_BORDER far dragon_fbord_tab[DRAGON_NUM_STATES];


/* * * * *
*
*  void dragon_reinit(PART *dragon);
*
*  This function will reinitiallize the borders of the dragon character.
*
* * * * */
void dragon_reinit(PART *dragon)
{
   /* If initalizing for the first time, set slopes for all of the borders */
   if(!dragon)
   {
      set_border_table_slopes(PT_DRAGON,1,dragon_bord_tab,
                              dragon_fbord_tab, DRAGON_NUM_STATES);
      return;
   }

   if (dragon->flags2 & F2_FLIP_H_DRAW)
      dragon->border = dragon_fbord_tab[dragon->state];
   else
      dragon->border = dragon_bord_tab[dragon->state];

   set_adjusted_loc_size(dragon);
}

/* * * * *
*
*  void dragon_flip(PART *dragon, SHORT flip_mode);
*
* * * * */
#pragma argsused
void dragon_flip(PART *dragon, SHORT flip_mode)
{
   dragon->flags2 ^= F2_FLIP_H_DRAW;
   dragon_reinit(dragon);
   part_to_er(dragon,1|2);
   set_redraw(dragon,2);
}

/* * * * *
*
*  short dragon_collide(PART *cur_part);
*
*  This is the main collision rountine.
*
* * * * */
short dragon_collide(PART *cur_part)
{
   cur_part->col_info.part->sub_state = 1;
   return(1);
}

/* * * * *
*
*  void dragon_internal(PART *dragon);
*
* * * * */
void dragon_internal(PART *dragon)
{
   PART *pptr;

   static const CHAR far state_array[] =
   {
      1,2,3,4,2,3,4,2,3,4,5,6,
      7,8,9,10,11,9,7,8,10,11,10,7,8,10,11,10,
      7,8,9,10,11,9,7,8,10,11,10,7,8,10,11,10,
      1,1,1,1,1,1,1,1,6,6,6
   };

   #define FIRE_NUM_STATES (sizeof(state_array)/sizeof(CHAR))
   #define FIRE_RATE       2
   #define START_FLAME     12
   #define END_FLAME       (FIRE_NUM_STATES - 11)

   /* process animation */
   if (dragon->sub_state)
   {
      if (!(++dragon->work_var % FIRE_RATE))
      {
         /* animate the dragon breathing fire */
         if (dragon->work_var < FIRE_NUM_STATES * FIRE_RATE)
            dragon->state = state_array[dragon->work_var / FIRE_RATE] - 1;
         else
            dragon->sub_state = dragon->state = dragon->work_var = 0;

         dragon_reinit(dragon);

         if (dragon->work_var / FIRE_RATE == 1)
            jtp_sx_play(SX_DRAGON_GASP,2,0);
         if ((dragon->state == 4) && (dragon->old_state == 3))
            jtp_sx_play(SX_DRAGON_BLOW,2,1);
         if ((dragon->state == 0) && (dragon->old_state == 9))
            jtp_sx_stop(SX_DRAGON_BLOW);  /* check to see if this is ok with Richr */
/*         if ((dragon->state == 5) && !dragon->old_state) */
/*            jtp_sx_play(SX_DRAGON_BURP,2,0); */
      }

      /* check for flame interaction */
      if ((dragon->work_var > START_FLAME * FIRE_RATE) &&
         (dragon->work_var < END_FLAME * FIRE_RATE))
      {
         if (dragon->flags2 & F2_FLIP_H_DRAW)
            tn_query_dist(dragon,F1_STATIC_L|F1_MOVE_L,
               dragon->base_size.x+23,-4,77,24);
         else
            tn_query_dist(dragon,F1_STATIC_L|F1_MOVE_L,-100,-4,77,24);

         pptr = dragon->qptr;
         while (pptr)
         {
            switch (pptr->type)
            {
               case PT_SID_MOUSE:
                  pptr->sub_state = SID_DRAGON_INDEX;
                  break;
               case PT_AL_CAT:
                  pptr->sub_state = CAT_BOMB_INDEX;
                  break;
               case PT_CANDLE:
               case PT_BOMB:
               case PT_BALLOON:
               case PT_TEAPOT:
                  pptr->sub_state = 1;
                  break;
               case PT_ELEPHANT:
                  pptr->sub_state = 3;
                  break;
            }

            pptr = pptr->qptr;
         }
      }
   }
}


