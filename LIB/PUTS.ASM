; $Header: h:\toons\rcs\PUTS.ASM_v 1.1 1994/02/19 22:48:27 KENH Exp $
;{----------------------------------------------------------------------}
;{ Module:	puts.asm						}
;{ Description:	put string routines					}
;{ Part of:	SEGALIB.LIB						}
;{ Original:	?							}
;{ Started:	5/1/93							}
;{----------------------------------------------------------------------}
;{		*** Copyright 1993 Futurescape Productions ***		}
;{----------------------------------------------------------------------}

;
; $Log: PUTS.ASM_v $
; Revision 1.1  1994/02/19  22:48:27  KENH
; .
;
;

	include equates.inc
        include sega.inc
                                        
	dsection	.data
	xdef	_AsciiChars
_AsciiChars:
	dc.w	1

        tsection 	.text

	xref	_ScreenRow,_ScreenCol
	xref	_VdpShadow,_ScrAAddr
	xref	_CharPalette
	xdef	_AsciiPalette,_CharSet
	xdef	_putchx
	xref	_SYS_VDPAccess
	xdef	puts
	XREF	DlChars,_SYS_SetPalette,_SYS_LastChar

*;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
*; FUNCTION:     putchx  - console I/O function!
*; DESCRIPTION:  Console I/O to the Genesis screen - Assumes that the Genesis
*;               is in a 40 col mode.
*;               MAP A will receive the text, the ASCII font shoud have been
*;               loaded. MAP A should be located at _ScrAAddr
*;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
_putchx:
	sf	_SYS_VDPAccess
	move.w  _ScreenRow,D1
	lsl.w   #6,D1           ; D0=(ScreenRow*64+ScreenCol)*2
	add.w   _ScreenCol,D1   ;
	lsl.w   #1,D1
	add.w   _ScrAAddr,D1	; adjust for address...
	CalcVramWrtAddrCode D1,D2
	move.l  D2,VCTRL        ; Set vram write address
	cmp.b   #10,D0          ; Is linefeed?
	bne     PC_1
	addq.w  #1,_ScreenRow
	bra     PC_3
PC_1:   
	cmp.b   #13,D0          ; is a CR?
	bne     PC_2
	move.w  #0,_ScreenCol
	bra     PC_3
PC_2:   
	sub.w   #32,d0          ; Adjust for our character set
	add.w	_AsciiChars,d0
	move.w	_CharPalette,d1	; get color palette to draw character in
	ror.w	#3,d1
	and.w	#$6000,d1
	or.w	d1,d0
	move.w  d0,VDATA        ; and set the map
	addq.w  #1,_ScreenCol
PC_3:   
	cmp.w   #39,_ScreenCol  ; At last col?
	bls     PC_4
	addq.w  #1,_ScreenRow
	move.w  #0,_ScreenCol   ; If so, go to the next row
PC_4:   
	cmp.w   #26,_ScreenRow  ; At last row?
	bls     PC_5            ; No, go around
*
* Scroll the screen up here
*
	AutoIncrement   1
	move.w    #$74,D0         ; Enable DMA
	SetVdpRegisterCode 1,D0
	SetVdpRegister  19,$00
	SetVdpRegister  20,$0D  ; Setup DMA length
	SetVdpRegister  21,$80
	SetVdpRegister  22,$C0  ; DMA source address - $c080
	SetVdpRegister  23,$C0  ; DMA VRAM copy mode...
	MOVE.L  #$000000C3,VCTRL         ;Set DMA destination
** We should be DMA'ing now
PC_4A:  
	MOVE.W  VCTRL,D0
	BTST    #1,D0
	BNE     PC_4A           ; Wait for DMA
	SUBQ.W  #1,_ScreenRow

PC_5:
	st	_SYS_VDPAccess
	rts

*;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
*; FUNCTION:     puts  - console I/O function!
*; DESCRIPTION:  print the string on the genesis screen - Assumes that the Genesis
*;               is in a 40 col mode.
*;               MAP A will receive the text, the ASCII font shoud have been
*;               loaded. MAP A should be located at _ScrAAddr
*; PARAMETERS:
*;		A0 = address of NULL terminated 'C' string
*;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
puts:
	tst.w	_SYS_LastChar
	bne.s	.isloaded
	move.l	#_AsciiPalette,-(sp)
	jsr	_SYS_SetPalette
	adda.w	#4,sp

	move.l	#_NCharSet,a0
	jsr	DlChars

.isloaded:
	
	moveq.l	#0,d0
.loop
	move.b	(a0)+,d0
	beq	.fini
	movem.l	a0/d0,-(a7)
	jsr	_putchx
	movem.l	(a7)+,a0/d0
	bra.s	.loop
.fini
	rts
	

*----------------------------------------------------------------------------
*Character Set from textfont.gen - In ASCII Order, starts at char #48, which
* is a space (Add 16 to ascii to get text on the screen
*----------------------------------------------------------------------------
_NCharSet:
	dc.w	96
_CharSet:
* Char #0
	DC.L	$00000000,$00000000,$00000000,$00000000
	DC.L	$00000000,$00000000,$00000000,$00000000

	DC.L	$FFFFFFFF,$FFFFFFFF,$FFFFFFFF,$FFFFFFFF
	DC.L	$FFFFFFFF,$FFFFFFFF,$FFFFFFFF,$FFFFFFFF
* Char #1
	DC.L	$FF11FFFF,$FF11FFFF,$FF11FFFF,$FF11FFFF
	DC.L	$FF11FFFF,$FFFFFFFF,$FF11FFFF,$FFFFFFFF
* Char #2
	DC.L	$F11F11FF,$F11F11FF,$F11F11FF,$FFFFFFFF
	DC.L	$FFFFFFFF,$FFFFFFFF,$FFFFFFFF,$FFFFFFFF
* Char #3
	DC.L	$F11F11FF,$F11F11FF,$1111111F,$F11F11FF
	DC.L	$1111111F,$F11F11FF,$F11F11FF,$FFFFFFFF
* Char #4
	DC.L	$FF11FFFF,$F11111FF,$11FFFFFF,$F1111FFF
	DC.L	$FFFF11FF,$11111FFF,$FF11FFFF,$FFFFFFFF
* Char #5
	DC.L	$FFFFFFFF,$11FFF11F,$11FF11FF,$FFF11FFF
	DC.L	$FF11FFFF,$F11FF11F,$11FFF11F,$FFFFFFFF
* Char #6
	DC.L	$FF111FFF,$F11F11FF,$FF111FFF,$F111F11F
	DC.L	$11F111FF,$11FF11FF,$F111F11F,$FFFFFFFF
* Char #7
	DC.L	$F11FFFFF,$F11FFFFF,$11FFFFFF,$FFFFFFFF
	DC.L	$FFFFFFFF,$FFFFFFFF,$FFFFFFFF,$FFFFFFFF
* Char #8
	DC.L	$FFF11FFF,$FF11FFFF,$F11FFFFF,$F11FFFFF
	DC.L	$F11FFFFF,$FF11FFFF,$FFF11FFF,$FFFFFFFF
* Char #9
	DC.L	$F11FFFFF,$FF11FFFF,$FFF11FFF,$FFF11FFF
	DC.L	$FFF11FFF,$FF11FFFF,$F11FFFFF,$FFFFFFFF
* Char #10
	DC.L	$FFFFFFFF,$F11FF11F,$FF1111FF,$11111111
	DC.L	$FF1111FF,$F11FF11F,$FFFFFFFF,$FFFFFFFF
* Char #11
	DC.L	$FFFFFFFF,$FF11FFFF,$FF11FFFF,$111111FF
	DC.L	$FF11FFFF,$FF11FFFF,$FFFFFFFF,$FFFFFFFF
* Char #12
	DC.L	$FFFFFFFF,$FFFFFFFF,$FFFFFFFF,$FFFFFFFF
	DC.L	$FFFFFFFF,$FF11FFFF,$FF11FFFF,$F11FFFFF
* Char #13
	DC.L	$FFFFFFFF,$FFFFFFFF,$FFFFFFFF,$111111FF
	DC.L	$FFFFFFFF,$FFFFFFFF,$FFFFFFFF,$FFFFFFFF
* Char #14
	DC.L	$FFFFFFFF,$FFFFFFFF,$FFFFFFFF,$FFFFFFFF
	DC.L	$FFFFFFFF,$FF11FFFF,$FF11FFFF,$FFFFFFFF
* Char #15
	DC.L	$FFFFF11F,$FFFF11FF,$FFF11FFF,$FF11FFFF
	DC.L	$F11FFFFF,$11FFFFFF,$1FFFFFFF,$FFFFFFFF
* Char #16
	DC.L	$F11111FF,$11FFF11F,$11FF111F,$11F1111F
	DC.L	$1111F11F,$111FF11F,$F11111FF,$FFFFFFFF
* Char #17
	DC.L	$FF11FFFF,$F111FFFF,$FF11FFFF,$FF11FFFF
	DC.L	$FF11FFFF,$FF11FFFF,$F1111FFF,$FFFFFFFF
* Char #18
	DC.L	$11111FFF,$FFFF11FF,$FFFF11FF,$FF111FFF
	DC.L	$F11FFFFF,$11FFFFFF,$111111FF,$FFFFFFFF
* Char #19
	DC.L	$11111FFF,$FFFF11FF,$FFFF11FF,$FF111FFF
	DC.L	$FFFF11FF,$FFFF11FF,$11111FFF,$FFFFFFFF
* Char #2F
	DC.L	$FFF111FF,$FF1111FF,$F11F11FF,$11FF11FF
	DC.L	$1111111F,$FFFF11FF,$FFFF11FF,$FFFFFFFF
* Char #21
	DC.L	$111111FF,$11FFFFFF,$11111FFF,$FFFF11FF
	DC.L	$FFFF11FF,$FFFF11FF,$11111FFF,$FFFFFFFF
* Char #22
	DC.L	$FF1111FF,$F11FFFFF,$11FFFFFF,$11111FFF
	DC.L	$11FF11FF,$11FF11FF,$F1111FFF,$FFFFFFFF
* Char #23
	DC.L	$111111FF,$FFFF11FF,$FFF11FFF,$FF11FFFF
	DC.L	$F11FFFFF,$11FFFFFF,$11FFFFFF,$FFFFFFFF
* Char #24
	DC.L	$F1111FFF,$11FF11FF,$11FF11FF,$F1111FFF
	DC.L	$11FF11FF,$11FF11FF,$F1111FFF,$FFFFFFFF
* Char #25
	DC.L	$F1111FFF,$11FF11FF,$11FF11FF,$F11111FF
	DC.L	$FFFF11FF,$FFFF11FF,$F1111FFF,$FFFFFFFF
* Char #26
	DC.L	$FFFFFFFF,$FF11FFFF,$FF11FFFF,$FFFFFFFF
	DC.L	$FFFFFFFF,$FF11FFFF,$FF11FFFF,$FFFFFFFF
* Char #27
	DC.L	$FFFFFFFF,$FF11FFFF,$FF11FFFF,$FFFFFFFF
	DC.L	$FFFFFFFF,$FF11FFFF,$FF11FFFF,$F11FFFFF
* Char #28
	DC.L	$FFF11FFF,$FF11FFFF,$F11FFFFF,$11FFFFFF
	DC.L	$F11FFFFF,$FF11FFFF,$FFF11FFF,$FFFFFFFF
* Char #29
	DC.L	$FFFFFFFF,$FFFFFFFF,$111111FF,$FFFFFFFF
	DC.L	$FFFFFFFF,$111111FF,$FFFFFFFF,$FFFFFFFF
* Char #3F
	DC.L	$F11FFFFF,$FF11FFFF,$FFF11FFF,$FFFF11FF
	DC.L	$FFF11FFF,$FF11FFFF,$F11FFFFF,$FFFFFFFF
* Char #31
	DC.L	$11111FFF,$FFFF11FF,$FFFF11FF,$FF111FFF
	DC.L	$FF11FFFF,$FFFFFFFF,$FF11FFFF,$FFFFFFFF
* Char #32
	DC.L	$F11111FF,$11FFF11F,$11F1111F,$11F1111F
	DC.L	$11F1111F,$11FFFFFF,$F1111FFF,$FFFFFFFF
* Char #33
	DC.L	$FF11FFFF,$F1111FFF,$11FF11FF,$11FF11FF
	DC.L	$111111FF,$11FF11FF,$11FF11FF,$FFFFFFFF
* Char #34
	DC.L	$11111FFF,$11FF11FF,$11FF11FF,$11111FFF
	DC.L	$11FF11FF,$11FF11FF,$11111FFF,$FFFFFFFF
* Char #35
	DC.L	$F11111FF,$11FFFFFF,$11FFFFFF,$11FFFFFF
	DC.L	$11FFFFFF,$11FFFFFF,$F11111FF,$FFFFFFFF
* Char #36
	DC.L	$11111FFF,$11FF11FF,$11FF11FF,$11FF11FF
	DC.L	$11FF11FF,$11FF11FF,$11111FFF,$FFFFFFFF
* Char #37
	DC.L	$111111FF,$11FFFFFF,$11FFFFFF,$11111FFF
	DC.L	$11FFFFFF,$11FFFFFF,$111111FF,$FFFFFFFF
* Char #38
	DC.L	$111111FF,$11FFFFFF,$11FFFFFF,$11111FFF
	DC.L	$11FFFFFF,$11FFFFFF,$11FFFFFF,$FFFFFFFF
* Char #39
	DC.L	$F11111FF,$11FFFFFF,$11FFFFFF,$11FFFFFF
	DC.L	$11F111FF,$11FF11FF,$F11111FF,$FFFFFFFF
* Char #40
	DC.L	$11FF11FF,$11FF11FF,$11FF11FF,$111111FF
	DC.L	$11FF11FF,$11FF11FF,$11FF11FF,$FFFFFFFF
* Char #41
	DC.L	$F1111FFF,$FF11FFFF,$FF11FFFF,$FF11FFFF
	DC.L	$FF11FFFF,$FF11FFFF,$F1111FFF,$FFFFFFFF
* Char #42
	DC.L	$FFF1111F,$FFFF11FF,$FFFF11FF,$FFFF11FF
	DC.L	$FFFF11FF,$FFFF11FF,$11111FFF,$FFFFFFFF
* Char #43
	DC.L	$11FFF11F,$11FF11FF,$11F11FFF,$1111FFFF
	DC.L	$11F11FFF,$11FF11FF,$11FFF11F,$FFFFFFFF
* Char #44
	DC.L	$11FFFFFF,$11FFFFFF,$11FFFFFF,$11FFFFFF
	DC.L	$11FFFFFF,$11FFFFFF,$111111FF,$FFFFFFFF
* Char #45
	DC.L	$11FFF11F,$111F111F,$1111111F,$11F1F11F
	DC.L	$11FFF11F,$11FFF11F,$11FFF11F,$FFFFFFFF
* Char #46
	DC.L	$11FFF11F,$111FF11F,$1111F11F,$11F1111F
	DC.L	$11FF111F,$11FFF11F,$11FFF11F,$FFFFFFFF
* Char #47
	DC.L	$F1111FFF,$11FF11FF,$11FF11FF,$11FF11FF
	DC.L	$11FF11FF,$11FF11FF,$F1111FFF,$FFFFFFFF
	xdef	_numbersChars
_numbersChars:
* Char #48
	DC.L	$11111FFF,$11FF11FF,$11FF11FF,$11111FFF
	DC.L	$11FFFFFF,$11FFFFFF,$11FFFFFF,$FFFFFFFF
* Char #49
	DC.L	$F1111FFF,$11FF11FF,$11FF11FF,$11FF11FF
	DC.L	$11FF11FF,$11F11FFF,$F11F11FF,$FFFFFFFF
* Char #5F
	DC.L	$11111FFF,$11FF11FF,$11FF11FF,$11111FFF
	DC.L	$1111FFFF,$11F11FFF,$11FF11FF,$FFFFFFFF
* Char #51
	DC.L	$F11111FF,$11FFFFFF,$11FFFFFF,$F1111FFF
	DC.L	$FFFF11FF,$FFFF11FF,$11111FFF,$FFFFFFFF
* Char #52
	DC.L	$111111FF,$FF11FFFF,$FF11FFFF,$FF11FFFF
	DC.L	$FF11FFFF,$FF11FFFF,$FF11FFFF,$FFFFFFFF
* Char #53
	DC.L	$11FF11FF,$11FF11FF,$11FF11FF,$11FF11FF
	DC.L	$11FF11FF,$11FF11FF,$F11111FF,$FFFFFFFF
* Char #54
	DC.L	$11FF11FF,$11FF11FF,$11FF11FF,$11FF11FF
	DC.L	$11FF11FF,$F1111FFF,$FF11FFFF,$FFFFFFFF
* Char #55
	DC.L	$11FFF11F,$11FFF11F,$11FFF11F,$11F1F11F
	DC.L	$1111111F,$111F111F,$11FFF11F,$FFFFFFFF
* Char #56
	DC.L	$11FFF11F,$11FFF11F,$F11F11FF,$FF111FFF
	DC.L	$F11F11FF,$11FFF11F,$11FFF11F,$FFFFFFFF
* Char #57
	DC.L	$11FF11FF,$11FF11FF,$11FF11FF,$F1111FFF
	DC.L	$FF11FFFF,$FF11FFFF,$FF11FFFF,$FFFFFFFF
* Char #58
	DC.L	$1111111F,$FFFF11FF,$FFF11FFF,$FF11FFFF
	DC.L	$F11FFFFF,$11FFFFFF,$1111111F,$FFFFFFFF
* Char #59
	DC.L	$F1111FFF,$F11FFFFF,$F11FFFFF,$F11FFFFF
	DC.L	$F11FFFFF,$F11FFFFF,$F1111FFF,$FFFFFFFF
* Char #6F
	DC.L	$11FFFFFF,$F11FFFFF,$FF11FFFF,$FFF11FFF
	DC.L	$FFFF11FF,$FFFFF11F,$FFFFFF1F,$FFFFFFFF
* Char #61
	DC.L	$F1111FFF,$FFF11FFF,$FFF11FFF,$FFF11FFF
	DC.L	$FFF11FFF,$FFF11FFF,$F1111FFF,$FFFFFFFF
* Char #62
	DC.L	$FFF1FFFF,$FF111FFF,$F11F11FF,$11FFF11F
	DC.L	$FFFFFFFF,$FFFFFFFF,$FFFFFFFF,$FFFFFFFF
* Char #63
	DC.L	$FFFFFFFF,$FFFFFFFF,$FFFFFFFF,$FFFFFFFF
	DC.L	$FFFFFFFF,$FFFFFFFF,$FFFFFFFF,$11111111
* Char #64
	DC.L	$FF11FFFF,$FF11FFFF,$FFF11FFF,$FFFFFFFF
	DC.L	$FFFFFFFF,$FFFFFFFF,$FFFFFFFF,$FFFFFFFF
* Char #65
	DC.L	$FFFFFFFF,$FFFFFFFF,$11111FFF,$FFFF11FF
	DC.L	$F11111FF,$11FF11FF,$F11111FF,$FFFFFFFF
* Char #66
	DC.L	$11FFFFFF,$11FFFFFF,$11111FFF,$11FF11FF
	DC.L	$11FF11FF,$11FF11FF,$11111FFF,$FFFFFFFF
* Char #67
	DC.L	$FFFFFFFF,$FFFFFFFF,$F11111FF,$11FFFFFF
	DC.L	$11FFFFFF,$11FFFFFF,$F11111FF,$FFFFFFFF
* Char #68
	DC.L	$FFFF11FF,$FFFF11FF,$F11111FF,$11FF11FF
	DC.L	$11FF11FF,$11FF11FF,$F11111FF,$FFFFFFFF
* Char #69
	DC.L	$FFFFFFFF,$FFFFFFFF,$F1111FFF,$11FF11FF
	DC.L	$111111FF,$11FFFFFF,$F11111FF,$FFFFFFFF
* Char #7F
	DC.L	$FF1111FF,$F11FFFFF,$F11FFFFF,$11111FFF
	DC.L	$F11FFFFF,$F11FFFFF,$F11FFFFF,$FFFFFFFF
* Char #71
	DC.L	$FFFFFFFF,$FFFFFFFF,$F11111FF,$11FF11FF
	DC.L	$11FF11FF,$F11111FF,$FFFF11FF,$11111FFF
* Char #72
	DC.L	$11FFFFFF,$11FFFFFF,$11111FFF,$11FF11FF
	DC.L	$11FF11FF,$11FF11FF,$11FF11FF,$FFFFFFFF
* Char #73
	DC.L	$FF11FFFF,$FFFFFFFF,$FF11FFFF,$FF11FFFF
	DC.L	$FF11FFFF,$FF11FFFF,$FF11FFFF,$FFFFFFFF
* Char #74
	DC.L	$FFF11FFF,$FFFFFFFF,$FFF11FFF,$FFF11FFF
	DC.L	$FFF11FFF,$FFF11FFF,$FFF11FFF,$1111FFFF
* Char #75
	DC.L	$11FFFFFF,$11FFFFFF,$11FF11FF,$11F11FFF
	DC.L	$1111FFFF,$11F11FFF,$11FF11FF,$FFFFFFFF
* Char #76
	DC.L	$F111FFFF,$FF11FFFF,$FF11FFFF,$FF11FFFF
	DC.L	$FF11FFFF,$FF11FFFF,$FF11FFFF,$FFFFFFFF
* Char #77
	DC.L	$FFFFFFFF,$FFFFFFFF,$11FFF11F,$1111111F
	DC.L	$11F1F11F,$11FFF11F,$11FFF11F,$FFFFFFFF
* Char #78
	DC.L	$FFFFFFFF,$FFFFFFFF,$11111FFF,$11FF11FF
	DC.L	$11FF11FF,$11FF11FF,$11FF11FF,$FFFFFFFF
* Char #79
	DC.L	$FFFFFFFF,$FFFFFFFF,$F1111FFF,$11FF11FF
	DC.L	$11FF11FF,$11FF11FF,$F1111FFF,$FFFFFFFF
* Char #8F
	DC.L	$FFFFFFFF,$FFFFFFFF,$11111FFF,$11FF11FF
	DC.L	$11FF11FF,$11FF11FF,$11111FFF,$11FFFFFF
* Char #81
	DC.L	$FFFFFFFF,$FFFFFFFF,$F11111FF,$11FF11FF
	DC.L	$11FF11FF,$11FF11FF,$F11111FF,$FFFF11FF
* Char #82
	DC.L	$FFFFFFFF,$FFFFFFFF,$11F111FF,$111FFFFF
	DC.L	$11FFFFFF,$11FFFFFF,$11FFFFFF,$FFFFFFFF
* Char #83
	DC.L	$FFFFFFFF,$FFFFFFFF,$F11111FF,$11FFFFFF
	DC.L	$F1111FFF,$FFFF11FF,$11111FFF,$FFFFFFFF
* Char #84
	DC.L	$F11FFFFF,$F11FFFFF,$111111FF,$F11FFFFF
	DC.L	$F11FFFFF,$F11FFFFF,$FF1111FF,$FFFFFFFF
* Char #85
	DC.L	$FFFFFFFF,$FFFFFFFF,$11FF11FF,$11FF11FF
	DC.L	$11FF11FF,$11FF11FF,$F11111FF,$FFFFFFFF
* Char #86
	DC.L	$FFFFFFFF,$FFFFFFFF,$11FF11FF,$11FF11FF
	DC.L	$11FF11FF,$F1111FFF,$FF11FFFF,$FFFFFFFF
* Char #87
	DC.L	$FFFFFFFF,$FFFFFFFF,$11FFF11F,$11FFF11F
	DC.L	$11F1F11F,$1111111F,$11FFF11F,$FFFFFFFF
* Char #88
	DC.L	$FFFFFFFF,$FFFFFFFF,$11FFF11F,$F11F11FF
	DC.L	$FF111FFF,$F11F11FF,$11FFF11F,$FFFFFFFF
* Char #89
	DC.L	$FFFFFFFF,$FFFFFFFF,$11FF11FF,$11FF11FF
	DC.L	$11FF11FF,$F11111FF,$FFFF11FF,$11111FFF
* Char #9F
	DC.L	$FFFFFFFF,$FFFFFFFF,$111111FF,$FFF11FFF
	DC.L	$FF11FFFF,$F11FFFFF,$111111FF,$FFFFFFFF
* Char #91
	DC.L	$FFF111FF,$FF11FFFF,$FF11FFFF,$111FFFFF
	DC.L	$FF11FFFF,$FF11FFFF,$FFF111FF,$FFFFFFFF
* Char #92
	DC.L	$FFF11FFF,$FFF11FFF,$FFF11FFF,$FFFFFFFF
	DC.L	$FFF11FFF,$FFF11FFF,$FFF11FFF,$FFFFFFFF
* Char #93
	DC.L	$111FFFFF,$FF11FFFF,$FF11FFFF,$FFF111FF
	DC.L	$FF11FFFF,$FF11FFFF,$111FFFFF,$FFFFFFFF
* Char #94
	DC.L	$F111F11F,$11F111FF,$FFFFFFFF,$FFFFFFFF
	DC.L	$FFFFFFFF,$FFFFFFFF,$FFFFFFFF,$FFFFFFFF
* Char #95
	DC.L	$FFFFFFFF,$FFF1FFFF,$FF111FFF,$F11F11FF
	DC.L	$11FFF11F,$11FFF11F,$1111111F,$FFFFFFFF

*****************************************************************************
*Palette info.
*****************************************************************************
* Initial palette
_AsciiPalette:
		dc.w	0,32
                dc.w    $111,$EEE,$EEE,$EEE,$EEE,$EEE,$EEE,$EA0
		dc.w	$E80,$E60,$E40,$E20,$E00,$C00,$A00,$000

                dc.w    $111,$000,$EEE,$EEE,$EEE,$EEE,$EEE,$EA0
		dc.w	$E80,$E60,$E40,$E20,$E00,$C00,$A00,$EEE
		dc.w	-1



