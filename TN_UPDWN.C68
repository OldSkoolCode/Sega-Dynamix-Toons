/* * * * *
*
*  TN_UPDWN.C
*
*  This file contains all the code associated with the up down counter.
*
*  By Chris Cole -- (c) 1993 Dynamix Software Development, Inc.
*
*  Modification History:
*  ---------------------
*  07/04/93 ChrisC   File created
*
* * * * */
#include "vm.h"
#include "tim.h"


/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                            *
*                                   UPDOWN                                   *
*                                                                            *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

/* ANIMATION
   The resting state is supershape #0.
   Standard hit on the right side. counts down.
     2,3,4,5,5,6,7,8,7
   Standard hit on the left side. counts up.
     9,10,11,12,12,13,14,15,14
   The numbers are in increasing order from 0 to 9. Shape #0 is 0 and so on.
     The offsets from the root(supershape #0) for each number are:
        Number          Left            Right
        0               (38,12)         (55,14)
        1               (39,11)         (56,14)
        2               (37,12)         (55,14)
        3               (38,12)         (56,14)
        4               (37,11)         (55,13)
        5               (38,12)         (56,14)
        6               (37,13)         (55,15)
        7               (38,13)         (56,15)
        8               (38,12)         (55,14)
        9               (38,11)         (55,13)
   The up-arrow is shape #21 and the down-arrow is shape #22.
     The arrows are placed at these offsets:
        Left up-arrow & down-arrow      (21,9)
        Right up-arrow & down-arrow     (66,12)
   The borders that indicate when the left or right side has been hit are:
        Between point 2 & 3 indicate the right side has been hit
        Between point 6 & 7 indicate the left side has been hit
*/

/* Constant data */
#define UPDOWN_NUM_STATES  15

/* supershape structure definition */
static F_SSHAPE_C updown1_2 = {0, UPDOWN_PLANE1, {11,255,255,255},
   {{43,7},{0,0},{0,0},{0,0}}};
static F_SSHAPE_C updown1 = {&updown1_2, UPDOWN_PLANE, {10,13,12,14},
   {{10,0},{6,6},{0,4},{47,5}}};
static F_SSHAPE_C updown2 = {0, UPDOWN_PLANE, {10,19,14,17},
   {{10,0},{2,6},{43,5},{-1,4}}};
static F_SSHAPE_C updown3_2 = {0, UPDOWN_PLANE1, {17,255,255,255},
   {{-5,4},{0,0},{0,0},{0,0}}};
static F_SSHAPE_C updown3 = {&updown3_2, UPDOWN_PLANE, {10,13,19,14},
   {{10,0},{-2,6},{2,6},{43,5}}};
static F_SSHAPE_C updown4_2 = {0, UPDOWN_PLANE1, {17,14,11,255},
   {{-11,4},{47,5},{43,7},{0,0}}};
static F_SSHAPE_C updown4 = {&updown4_2, UPDOWN_PLANE, {10,19,19,13},
   {{10,0},{2,6},{-6,6},{-8,6}}};
static F_SSHAPE_C updown5_2 = {0, UPDOWN_PLANE1, {18,14,11,255},
   {{-13,3},{47,5},{43,7},{0,0}}};
static F_SSHAPE_C updown5 = {&updown5_2, UPDOWN_PLANE, {10,19,19,13},
   {{10,0},{2,6},{-6,6},{-8,6}}};
static F_SSHAPE_C updown6_2 = {0, UPDOWN_PLANE1, {14,11,255,255},
   {{47,5},{43,7},{0,0},{0,0}}};
static F_SSHAPE_C updown6 = {&updown6_2, UPDOWN_PLANE, {10,19,13,18},
   {{10,0},{2,6},{-2,6},{-7,3}}};
static F_SSHAPE_C updown7_2 = {0, UPDOWN_PLANE1, {10,255,255,255},
   {{10,0},{0,0},{0,0},{0,0}}};
static F_SSHAPE_C updown7 = {&updown7_2, UPDOWN_PLANE, {13,18,14,11},
   {{6,6},{1,3},{47,5},{43,7}}};
static F_SSHAPE_C updown8_2 = {0, UPDOWN_PLANE1, {11,255,255,255},
   {{43,7},{0,0},{0,0},{0,0}}};
static F_SSHAPE_C updown8 = {&updown8_2, UPDOWN_PLANE, {10,13,17,14},
   {{10,0},{6,6},{3,4},{47,5}}};
static F_SSHAPE_C updown9 = {0, UPDOWN_PLANE, {10,12,20,15},
   {{10,0},{4,4},{43,7},{47,5}}};
static F_SSHAPE_C updown10_2 = {0, UPDOWN_PLANE1, {12,255,255,255},
   {{4,4},{0,0},{0,0},{0,0}}};
static F_SSHAPE_C updown10 = {&updown10_2, UPDOWN_PLANE, {10,11,20,15},
   {{10,0},{51,7},{43,7},{52,5}}};
static F_SSHAPE_C updown11_2 = {0, UPDOWN_PLANE1, {20,11,15,255},
   {{51,7},{59,7},{61,5},{0,0}}};
static F_SSHAPE_C updown11 = {&updown11_2, UPDOWN_PLANE, {10,13,12,20},
   {{10,0},{6,6},{0,4},{43,7}}};
static F_SSHAPE_C updown12_2 = {0, UPDOWN_PLANE1, {20,11,16,255},
   {{50,7},{58,7},{61,6},{0,0}}};
static F_SSHAPE_C updown12 = {&updown12_2, UPDOWN_PLANE, {10,13,12,20},
   {{10,0},{6,6},{0,4},{42,7}}};
static F_SSHAPE_C updown13_2 = {0, UPDOWN_PLANE1, {20,16,255,255},
   {{51,7},{58,6},{0,0},{0,0}}};
static F_SSHAPE_C updown13 = {&updown13_2, UPDOWN_PLANE, {10,13,12,20},
   {{10,0},{6,6},{0,4},{43,7}}};
static F_SSHAPE_C updown14_2 = {0, UPDOWN_PLANE1, {16,255,255,255},
   {{46,6},{0,0},{0,0},{0,0}}};
static F_SSHAPE_C updown14 = {&updown14_2, UPDOWN_PLANE, {10,13,12,11},
   {{10,0},{6,6},{0,4},{43,7}}};
static F_SSHAPE_C updown15_2 = {0, UPDOWN_PLANE1, {15,255,255,255},
   {{45,5},{0,0},{0,0},{0,0}}};
static F_SSHAPE_C updown15 = {&updown15_2, UPDOWN_PLANE, {10,13,12,11},
   {{10,0},{6,6},{0,4},{43,7}}};

/* supershape table definition */
PC_SSHAPE_C far updown_ss_tab[UPDOWN_NUM_STATES] = 
   {&updown1,&updown2,&updown3,&updown4,&updown5,&updown6,
    &updown7,&updown8,&updown9,&updown10,&updown11,&updown12,
    &updown13,&updown14,&updown15};

/* size. */
TIM_VEC_C far updown_size[UPDOWN_NUM_STATES] = 
   {{52,14},{52,14},{56,14},{63,14},{65,14},{59,14},
    {51,14},{50,14},{52,14},{57,14},{68,14},{69,14},
    {66,14},{54,14},{52,14}};

/* erase rectangle coordinate */
TIM_SCVEC_C far updown_os[UPDOWN_NUM_STATES] = 
   {{0,0},{-2,0},{-10,0},{-22,0},{-26,0},{-14,0},{2,0},{4,0},
    {4,0},{4,0},{0,0},{0,0},{0,0},{0,0},{0,0}};

/* border definitions. */
static PART_BORDER_C far updown1_bord[UPDOWN_BORDERS] =
   {{15,0,0},{19,0,0},{50,6,0},{50,12,0},
    {38,14,0},{10,14,0},{2,11,0},{2,5,0}};
static PART_BORDER_C far updown2_bord[UPDOWN_BORDERS] =
   {{15,0,0},{19,0,0},{45,6,0},{45,12,0},
    {38,14,0},{10,14,0},{7,11,0},{7,5,0}};

/* border tables */
static PC_PART_BORDER_C far updown_bord_tab[UPDOWN_NUM_STATES] =
   {updown1_bord,updown2_bord,updown2_bord,
    updown2_bord,updown2_bord,updown2_bord,
    updown2_bord,updown2_bord,updown2_bord,
    updown2_bord,updown2_bord,updown2_bord,
    updown2_bord,updown2_bord,updown2_bord
   };

#define UPDOWN_REST        0
#define FLIPPED            0x4000

/* * * * *
*
*  Functions
*
* * * * */
void updown_reinit(PART *counter)
{
   /* If initalizing for the first time, set slopes for all of the borders */
   if(!counter)
   {
      set_border_table_slopes(PT_UD_COUNTER,0,updown_bord_tab,0,UPDOWN_NUM_STATES);
      return;
   }

   counter->border = updown_bord_tab[counter->state];
   set_adjusted_loc_size(counter);
}

#pragma argsused
void updown_flip(PART *updown_part,short flip_mode)
{
   updown_part->start_memory = updown_part->memory ^= FLIPPED;
   updown_reinit(updown_part);
   part_to_er(updown_part,1|2);
   set_redraw(updown_part,2);
}

short updown_bounce(PART *cur_part)
{
   #define LEFT_BORD_NUM   6
   #define RIGHT_BORD_NUM  2

   PART *counter;

   counter = cur_part->col_info.part;

   /* check the borders to see if one of the important ones has been hit */
   switch (cur_part->col_info.border_num)
   {
      /* hit on left of the counter */
      case LEFT_BORD_NUM-1:
      case LEFT_BORD_NUM:
      case LEFT_BORD_NUM+1:
         if ((cur_part->speed.x >= 0) &&
            (cur_part->scrn_loc.x + (cur_part->base_size.x>>1) <
            counter->scrn_loc.x + 2))
            counter->sub_state = 1;
         break;
      case RIGHT_BORD_NUM-1:
      case RIGHT_BORD_NUM:
      case RIGHT_BORD_NUM+1:
         if ((cur_part->speed.x <= 0) &&
            (cur_part->scrn_loc.x + (cur_part->base_size.x>>1) >
            counter->scrn_loc.x + counter->base_size.x - 2))
            counter->sub_state = -1;
   }
   return(1);
}

void updown_internal(PART *counter)
{
   static const char far left_array[] =
   {
      1,9,10,11,12,12,13,14,15,14,1
   };
   #define LEFT_NUM_STATES    (sizeof(left_array)/sizeof(char far))

   static const char far right_array[] =
   {
      1,2,3,4,5,5,6,7,8,7,1
   };
   #define RIGHT_NUM_STATES   (sizeof(right_array)/sizeof(char far))

   #define COUNTER_SPEED      (EIGHT_PIX)

   char far *s_array;
   char s_num;
   P_PART_ELEMENTS elements;
   short x,y,speed;
   PART *pptr;
   static far RECT rect = {0,0,1,10};

   /* check if the counter is ready to increment */
   if (!counter->work_var1 && counter->sub_state && (counter->belt_size > 2))
      /* remember which direction the hit is from. */
      counter->work_var = counter->sub_state;

   /* setup debounce flag */
   if (!counter->sub_state)
      counter->belt_size++;
   else
      counter->belt_size = 0;

   /* check if the counter should be animating a hit. */
   if (counter->work_var)
   {
      if(!counter->work_var1)
         jtp_sx_play(SX_UPDOWN_COUNTER,1,0);

      elements = &prop[counter->type];

      /* check for a left hit */
      if (counter->work_var > 0)
      {
         s_array = left_array;
         s_num = LEFT_NUM_STATES;
         speed = COUNTER_SPEED;
         x = (elements->shp_offset + counter->state)->x + counter->size.x +
            rect.x;
      }
      else
      {
         s_array = right_array;
         s_num = RIGHT_NUM_STATES;
         speed = -COUNTER_SPEED;
         x = (elements->shp_offset + counter->state)->x - rect.x - rect.w;
      }

      /* animate the counter */
      counter->state = s_array[counter->work_var1] - 1;
      if (++counter->work_var1 == s_num)
         counter->work_var1 = counter->work_var = counter->sub_state = 0;
      updown_reinit(counter);

      /*increment / decrement the counter */
      if (counter->work_var1 == (s_num >> 1))
      {
         if (counter->memory & FLIPPED)
            if (counter->work_var > 0)
            {
               counter->memory &= 0xffff ^ FLIPPED;
               counter->memory--;
               counter->memory |= FLIPPED;
            }
            else
               counter->memory++;
         else
            if (counter->work_var > 0)
               counter->memory++;
            else
               counter->memory--;
      
         if (counter->memory < 0)
            counter->memory = counter->memory & FLIPPED + 99;
         if ((counter->memory & 0xff) > 99)
            counter->memory &= FLIPPED;
      }

      /* impart the correct velocity to any parts near enough to the counter */
      /* plunger. */
      y = (elements->shp_offset + counter->state)->y + rect.y;
      tn_query_dist(counter,F1_MOVE_L|F1_STATIC_L,x,y,rect.w,rect.h);
      pptr = counter->qptr;
      while (pptr)
      {
         if (pptr->flags1 & F1_MOVE_L)
         {
            pptr->speed.x += speed;
            check_term_velocity(pptr);
         }
         else
            generic_static_to_static_collide(counter, pptr);

         pptr = pptr->qptr;
      }
   }
}

/* * * * *
*
*  void draw_ud_counter(PART *counter,UCHAR plane,SHORT loc_scale_adj,SHORT size_scale_adj);
*
* * * * */
void draw_ud_counter(PART *counter,UCHAR plane,SHORT loc_scale_adj,SHORT size_scale_adj)
{
   void *shape_table;
   short ones,tens,x,y;
	short shape, shape1;

   static const char far ones_table[10][2] =
   {
      {30,9},
      {31,9},
      {30,9},
      {31,9},
      {30,8},
      {31,9},
      {30,10},
      {31,10},
      {30,9},
      {30,8},
   };

   static const char far tens_table[10][2] =
   {
      {19,7},
      {21,6},
      {19,7},
      {20,7},
      {19,6},
      {20,7},
      {19,8},
      {20,8},
      {20,7},
      {20,6},
   };

   /* assign the shape table pointers */
   x = counter->scrn_loc.x - ledge;
   y = counter->scrn_loc.y - tedge;
   shape_table = prop[counter->type].part_shapes;

   /* draw the arrows. */
   if (counter->memory & FLIPPED)
   {
      shape = 21;
      shape1 = 22;
   }
   else
   {
      shape = 22;
      shape1 = 21;
   }
   draw_bitmap(shape_table,x+9,y+4,0, shape);
   draw_bitmap(shape_table,x+37,y+9,0,shape1);

   /* draw the display. Note the number in the display will be stored in  */
   /* memory */
   ones = (counter->memory & (0xffff ^ FLIPPED)) % 10;
   tens = ((counter->memory & (0xffff ^ FLIPPED)) / 10) % 10;

   x = ones_table[ones][0] + counter->scrn_loc.x - ledge + 1;
   y = ones_table[ones][1] + counter->scrn_loc.y - tedge;
   draw_bitmap(shape_table,x,y,0, ones);

   x = tens_table[tens][0] + counter->scrn_loc.x - ledge + 1;
   y = tens_table[tens][1] + counter->scrn_loc.y - tedge;
   draw_bitmap(shape_table,x,y,0, tens);

   /* draw the base shape of the counter. */
   draw_norm_part(counter,plane,loc_scale_adj,size_scale_adj);

}


/* * * * *
*
*  short collide_with_ud_counter(PART *counter, PART *pptr);
*
*  This function will set the substate of the counter and return true if the
*  pptr is overlapping the plungers. It is an extremely rough approximation of
*  a collision.
*
* * * * */
short collide_with_ud_counter(PART *counter, PART *pptr)
{
   short x,y,w,h;
   short cx,cy,cw,ch;

   /* check for a null pointer */
   if (!counter || !pptr || (counter->type != PT_UD_COUNTER))
      return(0);

   x = counter->scrn_loc.x + counter->offset.x;
   w = counter->size.x;
   y = counter->scrn_loc.y + counter->offset.y + 10;
   h = counter->size.y - 20;
   cx = pptr->scrn_loc.x + pptr->offset.x;
   cw = pptr->size.x;
   cy = pptr->scrn_loc.y + pptr->offset.y;
   ch = pptr->size.y;

   /* check if the part is near the plunger */
   if ((cx + cw < x) || (x + w < cx) || (cy + ch < y) || (y + h < cy))
      return(0);

   /* check if the part is to the left of the counter */
   if (pptr->scrn_loc.x < counter->scrn_loc.x)
      counter->sub_state = 1;
   else
      counter->sub_state = -1;
   
   return(1);
}

                                      	
