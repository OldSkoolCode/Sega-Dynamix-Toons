/* * * * *
*
*  TN_PANEL.C
*
*  This module handles all the graphic interface of the control and edit
*  panels of the play mode and the edit freeform mode.
*
*  By Chris Cole -- (c) 1993 Dynamix Software Development, Inc.
*
*  Modification History:
*  ---------------------
*  03/01/93 ChrisC   File created
*
* * * * */
#ifdef __MSDOS__
#include <stdlib.h>
#include <stdio.h>
#include <alloc.h>
#include <string.h>
#include <ctype.h>
#include <math.h>
#include "mouse.h"
#include "keyboard.h"
#include "sx.h"
#include "simlib.h"
#include "vm_mylib.h"
#include "vm_keys.h"
#include "vm.h"
#include "tim.h"
#include "tim_text.h"
#endif


#include "vm.h"
#include "vm_mylib.h"
#include "tim.h"
#include "simlib.h"

UWORD panelChars;
UWORD pitemCount;
UWORD partPos = 0;

extern UBYTE cursors;
extern UBYTE catroot;
extern UBYTE part69;
extern UBYTE part6;
extern UBYTE part8;
extern UBYTE part9;
extern UBYTE part12;
extern UBYTE part13;
extern UBYTE part16;
extern UBYTE part20;
extern UBYTE part23;
extern UBYTE part45;
extern UBYTE anterator;
extern UBYTE icons;
extern UBYTE rbuttons;
extern UBYTE numbers;
extern UBYTE partbin2;
extern UBYTE speed;
extern UBYTE handall;

UWORD temppal[16+6];		/* palette offset + palette size + palette + -1 */

static F_SSHAPE cursors1 = {0, 0, {2,255,255,255},
   {{0,10},{0,0},{0,0},{0,0}}};

static F_SSHAPE cursors2 = {0, 0, {0,255,255,255},
   {{-8,10},{0,0},{0,0},{0,0}}};

PC_SSHAPE_C cursor_ss_tab[2] = { &cursors1, &cursors2 };

const UWORD speedanims[] = { 1, 3, 6, 8, 10, 12};
const UWORD handAnims[] = {0,31,41,10,10,16,16,0,1,0,28,23,3};
const UWORD handASizes[] = {0,9,6,5,5,6,6,0,1,0,2,4,6};

cursoritem pb_hs[12];

/* * * * *
*
*  local function to this module
*
* * * * */
static void erase_go(short x, short y);
void erase_control(short x, short y);
static void erase_left(short x, short y);
static void erase_right(short x, short y);
static void erase_fairy(short x, short y);
static void erase_puzzle(short x, short y);
static void erase_chklist(short x, short y);



/* * * * *
*
*  void wait(short count);
*
*  This function uses vm_countdown to supply a very simple wait.
*
* * * * */
void wait(short count)
{
	long temp;

	temp = SYS_VCount+count;
	while (temp > SYS_VCount);
		
}



/* * * * *
*
*  void grey_out(char color, short x, short y, short w, short h);
*
*  This function will grey out the specified rectangle with the specified
*  color. This function does not set vm_dstptr.
*
* * * * */
#ifdef	__MSDOS__
void grey_out(char color, short x, short y, short w, short h)
{
   short x_offset, y_offset;

   for (y_offset=y; y_offset<(y+h+1); y_offset++)
      for (x_offset=x; x_offset<(x+w+1); x_offset++)
         if (x_offset%2)
            vm_my_setpix(x_offset-(y_offset%2), y_offset, color);
}

#else
/* * * * *
*
*  void grey_out(UWORD *palptr);
*
*  This function will grey out the specified palette and replace palette with
*  it. 
*
* * * * */
void grey_out(UWORD *palptr)
{
	UWORD *tptr;
	int i;
	UWORD palcolor;
	UWORD r,g,b;
	UWORD grey;

	tptr = temppal;
	*tptr++ = *palptr++;
	*tptr++ = *palptr++;
	for (i=16;i>0;i--)
		{
		palcolor = *palptr++;				/* get palette color */
		r = (palcolor >> 1) & 7;
		g = (palcolor >> 5) & 7;
		b = (palcolor >> 9) & 7;

		grey = (r*30)/100+(b*59)/100+(g*11)/100;

		palcolor = ((grey & 7) << 1) | ((grey & 7) << 5) | ((grey & 7) << 9);
		*tptr++ = palcolor;
		}
	*tptr++ = 0xffff;
	SYS_SetPalette(&temppal);
}

#endif


/* * * * *
*
*  void do_partbin(void);
*
*  This function takes care of getting a part from the part bin
*
* * * * */
void do_partbin(void)
{
	short selection;
	cursoritem *tptr;
	short i;
   PART *new_pb_part;

	cursoractive = FALSE;
	selection = 0;				/* initially on first part */

	SYS_JoyHit = FALSE;
	if (!num_pb_slots)
		{
		/* just show empty part bin then return */
		while ((!SYS_JoyHit) || (!SYS_JoyTable[JOY_A] && !SYS_JoyTable[JOY_C]));
		SYS_JoyHit = FALSE;
		partbin_active = FALSE;
		redraw_panels();
		cursoractive = TRUE;
		return;
		}

	for (;;)
		{
		tptr = &pb_hs[selection];

		EraseAnimMapFrame(0,3,1, &partbin2, &MapABuff, panelChars);
		EraseAnimMapFrame(0,3,2, &partbin2, &MapABuff, panelChars);
		EraseAnimMapFrame(0,3,3, &partbin2, &MapABuff, panelChars);
		EraseAnimMapFrame(0,3,4, &partbin2, &MapABuff, panelChars);
		EraseAnimMapFrame(0,3,5, &partbin2, &MapABuff, panelChars);
		EraseAnimMapFrame(0,3,6, &partbin2, &MapABuff, panelChars);
      if (pb_part != &avail_list)
			{
			DrawAnimMapFrame(0,3,1, &partbin2, &MapABuff, panelChars);
			DrawAnimMapFrame(0,3,2, &partbin2, &MapABuff, panelChars);
			}
		if (selection)
			DrawAnimMapFrame(0,3,3, &partbin2, &MapABuff, panelChars);
		if ((selection < 10) && (pb_hs[selection+1].ix != 0xffff))
			DrawAnimMapFrame(0,3,4, &partbin2, &MapABuff, panelChars);
		if ((new_pb_part=get_pb_part(num_pb_slots)) != 0)
			{
			DrawAnimMapFrame(0,3,5, &partbin2, &MapABuff, panelChars);
			DrawAnimMapFrame(0,3,6, &partbin2, &MapABuff, panelChars);
			}

		addDMAQueue(ScrBAddr, 64*2*28, &MapABuff);
		waitDMAQueue();

		while (!SYS_JoyHit) 
			{
			remapOffset = 0xe000;			/* remap sprite palette to user */
			/* -5,+10 is amount to adjust for crawl characters */
			SYS_ScrollUpdate = FALSE;
			put_crawl(tptr->ix-3, tptr->iy, tptr->iw+6, tptr->ih+6,
							(SYS_VCount/2) % 5, RED_OUTLINE);
			draw_toon_bin_icons(0,0);
			SYS_ScrollUpdate = TRUE;
			my_flip(1);
			remapOffset = 0;
			}


		SYS_JoyHit = FALSE;
		if (SYS_JoyTable[JOY_A])
			{
			/* select a part */
			click_over_partbin(selection);
			partbin_active = FALSE;
			redraw_panels();
			makeTempStatic(FALSE);
			cursoractive = TRUE;
			return;
			}

		if (SYS_JoyTable[JOY_C])
			{
			partbin_active = FALSE;
			redraw_panels();
			makeTempStatic(FALSE);
			cursoractive = TRUE;
			return;
			}

		if ((SYS_JoyTable[JOY_UP]) && (pb_part != &avail_list))
			{
         jtp_sx_play(SX_LEFT,0,0);
			scroll_pb_left(TOON_EDIT);
			}
		else if ((SYS_JoyTable[JOY_DOWN]) && new_pb_part)
			{
			jtp_sx_play(SX_RIGHT,0,0);
			scroll_pb_right(TOON_EDIT);
			}
		else if (SYS_JoyTable[JOY_LEFT])
			{
			do 
				{
				selection--;
				if (selection < 0)
					selection = 9;
				}
			while (pb_hs[selection].ix == 0xffff);
			}
		else if (SYS_JoyTable[JOY_RIGHT])
			{
			do 
				{
				selection++;
				if (selection > 9)
				selection = 0;
				}
				while (pb_hs[selection].ix == 0xffff);
			}

		}

}

/* * * * *
*
*  void draw_toon_edit_panel(short x, short y);
*
*  This function draws the toon edit panel on the left side of the screen with
*  the specified relative offsets.
*
* * * * */
void draw_toon_edit_panel(short x, short y)
{
	UWORD *palptr;

	FPCSetPal(&catroot);
	ClearMapBuff(&MapABuff);
	if (partbin_active)
		{
		DrawAnimMapFrame(0,3,0, &partbin2, &MapABuff, panelChars);
		SYS_ScrollUpdate = FALSE;
		draw_toon_bin_icons(0,0);
		SYS_ScrollUpdate = TRUE;

		/* is sprite remap palette #3 */
		FPCStorePal(&speed);
		/* is palette 1 */
		FPCStorePal(&partbin2);
		palptr = (UWORD *)&catroot;
		palptr += *palptr>>1;
		grey_out(palptr);
		} 
	SendSprList();
	addDMAQueue(ScrBAddr, 64*2*28, &MapABuff);
	waitDMAQueue();

}


/* * * * *
*
*  void erase_edit_panel(short x, short y);
*
*  This function will erase the edit panel.
*
* * * * */
void erase_edit_panel(short x, short y)
{
	ClearMapBuff(&MapABuff);
	addDMAQueue(ScrBAddr, 64*2*28, &MapABuff);
	waitDMAQueue();
}




/* * * * *
*
*  void draw_toon_edit_buttons(short x, short y);
*
* * * * */
void draw_toon_edit_buttons(short x, short y)
{
}




/* * * * *
*
*  void draw_toon_control_panel(short x, short y);
*
*  This function will draw the control panel on the right side of the screen.
*
* * * * */
void draw_toon_control_panel(short x, short y)
{
}



/* * * * *
*
*  void draw_toon_control_buttons(short x, short y);
*
*  This function draws the buttons on the control panel with the specified
*  offsets.
*
* * * * */
void draw_toon_control_buttons(short x, short y)
{
}




/* * * * *
*
*  void erase_control_panel(short x, short y);
*
*  This function will draw the current background over the control panel. 
*
* * * * */
void erase_control_panel(short x, short y)
{
#ifdef	__MSDOS__
   vm_dstptr = vm_buffptr;
   vm_srcptr = vm_scrnptr;
   x_offset = x;
   y_offset = y;
/*   vm_lcolor = vm_fcolor = bckgrnd_color; */
/*   vm_my_rect(583,0,57,400); */
   set_toon_clip(583,0,57,400);
   draw_gp_screen();
   set_full_scrn_clip();
#endif
}

/* * * * *
*
*  void draw_toon_edit_icons(short x, short y);
*
*  This function will handle all the drawing and animation of the icons
*  buttons.
*
*  This function will draw all shapes to vm_dstptr = vm_buffptr.
*
* * * * */
void draw_toon_edit_icons(short x, short y)
{
#ifdef	__MSDOS__
   draw_toon_bin_icons(x-3,y);
#endif
}

/* * * * *
*
*  void do_speed_select(void);
*
*  This function will handle all the drawing and animation of the speed
*  select menu.
* * * * */
void do_speed_select(void)
{
	UWORD speedChars;
	short selection;
	short animframe;
	long	lastvbl;

	cursoractive = FALSE;
	ClearMapBuff(&MapABuff);

	SYS_LastChar = spriteChar;
	FPCStorePal(&speed);
	FPCSetPal(&speed);
	speedChars = DLFPCChars(&speed) | CHARPRIORITY;
	DrawAnimMapFrame(0,3,0,&speed, &MapABuff, speedChars);
/*	DrawAnimMapFrame(0,3,speedanims[0],&speed, &MapABuff, speedChars); */
	DrawAnimMapFrame(0,3,speedanims[1],&speed, &MapABuff, speedChars);
	DrawAnimMapFrame(0,3,speedanims[2],&speed, &MapABuff, speedChars);
	DrawAnimMapFrame(0,3,speedanims[3],&speed, &MapABuff, speedChars);
	DrawAnimMapFrame(0,3,speedanims[4],&speed, &MapABuff, speedChars);
	addDMAQueue(ScrBAddr, 64*2*28, &MapABuff);
	waitDMAQueue();
	selection = 0;
	while (!SYS_JoyTable[JOY_A])
		{
		animframe = speedanims[selection];
		lastvbl = SYS_VCount;
		while (!SYS_JoyHit)
			{
			if (SYS_VCount >= lastvbl)
				{
				lastvbl = SYS_VCount+20;
				DrawAnimMapFrame(0,3,animframe,&speed, &MapABuff, speedChars);
				addDMAQueue(ScrBAddr, 64*2*28, &MapABuff);
				waitDMAQueue();
				EraseAnimMapFrame(0,3,animframe,&speed, &MapABuff, speedChars);
				animframe++;
				if (animframe == speedanims[selection+1])
					animframe = speedanims[selection];
				}
			}

		DrawAnimMapFrame(0,3,speedanims[selection],&speed, &MapABuff, speedChars);
		addDMAQueue(ScrBAddr, 64*2*28, &MapABuff);
		waitDMAQueue();
			
		SYS_JoyHit = FALSE;

		if (SYS_JoyTable[JOY_LEFT] || SYS_JoyTable[JOY_UP])
			{
			selection -= 1;
			if (selection < 0)
				selection = 4;
			}
		else if (SYS_JoyTable[JOY_RIGHT] || SYS_JoyTable[JOY_DOWN])
			{
			selection += 1;
			if (selection > 4)
				selection = 0;
			}
		}

	ClearMapBuff(&MapABuff);
	addDMAQueue(ScrBAddr, 64*2*28, &MapABuff);
	waitDMAQueue();
	SYS_LastChar = speedChars;

	cursoractive = TRUE;
	switch (selection)
		{
		case 0:
			tim_mode = TOON_GO;
			break;
		case 2:
			tim_mode = TOON_STOP;
			break;
		case 3:
			tim_mode = TOON_TEMPSAVE;
			break;
		}

}



/* * * * *
*
*  void draw_toon_left_button(char button, short x, short y);
*
*  This function will handle all the drawing and animation of the left
*  button.
*  if
*     button = 0, then draw button off.
*     button = 1, then draw button on.
*     button = 2, then toggle button from off to on to off.
*
*  This function will draw all shapes to vm_dstptr = vm_buffptr.
*
* * * * */
void draw_toon_left_button(char button, short x, short y)
{
#ifdef	__MSDOS__
   vm_dstptr = vm_buffptr;
   vm_srcptr = vm_scrnptr;
   x_offset = x;
   y_offset = y;
   my_mouse_off();

   switch (button)
   {
      case 0:
         erase_left(x, y);
         vm2_my_flip_draw(toon_cp_shapes[9],3,354,0);
         vm2_my_flip_draw(toon_cp_shapes[10],3,373,0);
         vm2_my_flip_draw(toon_cp_shapes[11],25,377,0);
         break;
      case 1:
         erase_left(x, y);
         vm2_my_flip_draw(toon_cp_shapes[9],3,361,0);
         break;
      case 2:
         /* draw first frame of animation. */
         draw_toon_left_button(1, x, y);
         my_flip(1);
         wait(30);

         /* draw second frame of animation. */
         draw_toon_left_button(0, x, y);
         my_flip(1);

         /* make sure both pages are identical */
         mouse_copy(1+x,354+y,40,39);
   }
   turn_mouse_on();
#endif
}




/* * * * *
*
*  void erase_left(short x, short y);
*
*  This function will draw all necessary corners, etc. to erase the control
*  button.
*
* * * * */
static void erase_left(short x, short y)
{
#ifdef	__MSDOS__
   vm_fcolor = vm_lcolor = panel_color;
   x_offset = x;
   y_offset = y;
   vm_fill = 1;
   vm_my_rect(2,353,38,37);
   vm2_my_flip_draw(corners[1],-4,376,0);
   vm2_my_flip_draw(corners[2],22,388,0);
   vm2_my_flip_draw(toon_cp_shapes[14],57,381,0);
#endif
}





/* * * * *
*
*  void draw_toon_right_button(char button, short x, short y);
*
*  This function will handle all the drawing and animation of the right
*  button.
*  if
*     button = 0, then draw button off.
*     button = 1, then draw button on.
*     button = 2, then toggle button from off to on to off.
*
*  This function will draw all shapes to vm_dstptr = vm_buffptr.
*
* * * * */
void draw_toon_right_button(char button, short x, short y)
{
#ifdef	__MSDOS__
   vm_dstptr = vm_buffptr;
   vm_srcptr = vm_scrnptr;
   x_offset = x;
   y_offset = y;
   my_mouse_off();

   switch (button)
   {
      case 0:
         erase_right(x, y);
         vm2_my_flip_draw(toon_cp_shapes[12],44,353,0);
         vm2_my_flip_draw(toon_cp_shapes[13],42,369,0);
         vm2_my_flip_draw(toon_cp_shapes[14],57,381,0);
         break;
      case 1:
         erase_right(x, y);
         vm2_my_flip_draw(toon_cp_shapes[12],42,358,0);
         break;
      case 2:
         /* draw first frame of animation. */
         draw_toon_right_button(1, x, y);
         my_flip(1);
         wait(30);

         /* draw second frame of animation. */
         draw_toon_right_button(0, x, y);
         my_flip(1);

         /* make sure both pages are identical */
         mouse_copy(40+x,353+y,46,45);
   }
   my_mouse_on();
#endif
}




/* * * * *
*
*  static void erase_right(short x, short y);
*
*  This function will draw all necessary corners, etc. to erase the control
*  button.
*
* * * * */
static void erase_right(short x, short y)
{
#ifdef	__MSDOS__
   vm_fcolor = vm_lcolor = panel_color;
   x_offset = x;
   y_offset = y;
   vm_fill = 1;
   vm_my_rect(40,351,45,43);
   vm2_my_flip_draw(corners[3],76,387,0);
   vm2_my_flip_draw(corners[2],22,388,0);
   vm_fcolor = vm_lcolor = highlight2;
   vm_my_rect(61,390,15,9);
   vm2_my_flip_draw(corners[4],81,378,0);
   vm_fcolor = vm_lcolor = bckgrnd_color;
   vm_my_rect(83,351,4,28);
#endif
}



/* * * * *
*
*  void draw_toon_fairy(char button, short x, short y);
*
*  This function will handle all the drawing and animation of the fairy
*  button.
*  if
*     button = 0, then draw button off.
*     button = 1, then toggle button from off to on to off.
*
*  This function will draw all shapes to vm_dstptr = vm_buffptr.
*
* * * * */
void draw_toon_fairy(char button, short x, short y)
{
#ifdef	__MSDOS__
   vm_dstptr = vm_buffptr;
   vm_srcptr = vm_scrnptr;
   x_offset = x;
   y_offset = y;
   my_mouse_off();

   switch(button)
   {
      case 0:
         erase_fairy(x, y);
         vm2_my_flip_draw(toon_rcp_shapes[4],585,9,0);
         break;
      case 1:
         /* draw first frame of animation. */
         erase_fairy(x, y);
         vm2_my_flip_draw(toon_rcp_shapes[3],585,14,0);
         my_flip(1);
         wait(30);

         /* draw second frame of animation. */
         draw_toon_fairy(0, x, y);
         vm2_my_flip_draw(toon_rcp_shapes[5],620,0,0);
         my_flip(1);
         wait(15);

         /* draw third frame of animation. */
         draw_toon_fairy(0, x, y);
         vm2_my_flip_draw(toon_rcp_shapes[6],628,0,0);
         my_flip(1);
         wait(15);

         /* draw forth frame of animation. */
         draw_toon_fairy(0, x, y);
         my_flip(1);
         wait(15);

         /* make sure both pages are identical */
         vm_dstptr = vm_buffptr;
         vm_srcptr = vm_scrnptr;
         mouse_copy(583+x,y,57,64);
   }
   my_mouse_on();
#endif
}




/* * * * *
*
*  static void erase_fairy(short x, short y);
*
*  This function draws all the shapes necessary to erase the fairy button.
*
* * * * */
static void erase_fairy(short x, short y)
{
#ifdef	__MSDOS__
   vm_dstptr = vm_buffptr;
   vm_srcptr = vm_scrnptr;
   x_offset = x;
   y_offset = y;
   vm_fill = 1;
   vm_fcolor = vm_lcolor = bckgrnd_color;
   vm_my_rect(583,24,24,34);
   vm_fcolor = vm_lcolor = panel_color;
   vm_my_rect(597,29,36,35);
   vm_fcolor = vm_lcolor = highlight2;
   vm_my_rect(633,29,7,18);
   vm_fcolor = vm_lcolor = highlight5;
   vm_my_line(592,58,592,24);
   vm_fcolor = vm_lcolor = highlight1;
   vm_my_line(639,27,639,50);
   vm2_my_flip_draw(corners[15],592,0,0);
#endif
}



/* * * * *
*
*  void draw_toon_puzzle(char button, short x, short y);
*
*  This function will handle all the drawing and animation of the puzzle
*  button.
*  if
*     button = 0, then draw button off.
*     button = 1, then toggle button from off to on to off.
*
*  This function will draw all shapes to vm_dstptr = vm_buffptr.
*
* * * * */
void draw_toon_puzzle(char button, short x, short y)
{
#ifdef	__MSDOS__
   char i;
   static unsigned char direction;

   vm_dstptr = vm_buffptr;
   vm_srcptr = vm_scrnptr;
   x_offset = x;
   y_offset = y;
   my_mouse_off();

   switch(button)
   {
      case 0:
         erase_puzzle(x, y);
         vm2_my_flip_draw(toon_rcp_shapes[0],595,17,0);
         break;
      case 1:
         /* toggle the direction of the rotation of the puzzle */
         direction++;
         if (direction % 2)
         {
            for (i=0; i<((direction % 5) + 1); i++)
            {
               /* draw first frame of animation. */
               erase_puzzle(x, y);
               vm2_my_flip_draw(toon_rcp_shapes[1],594,16,0);
               my_flip(1);
               wait(15 - 2*(direction % 5));

               /* draw second frame of animation. */
               erase_puzzle(x, y);
               vm2_my_flip_draw(toon_rcp_shapes[2],596,18,0);
               my_flip(1);
               wait(15 - 2*(direction % 5));

               /* draw third frame of animation. */
               draw_toon_puzzle(0, x, y);
               my_flip(1);
               wait(15 - 2*(direction % 5));
            }
         }
         else
         {
            for (i=0; i<((direction % 5) + 1); i++)
            {
               /* draw first frame of animation. */
               erase_puzzle(x, y);
               vm2_my_flip_draw(toon_rcp_shapes[2],596,18,0);
               my_flip(1);
               wait(15 - 2*(direction % 5));

               /* draw second frame of animation. */
               erase_puzzle(x, y);
               vm2_my_flip_draw(toon_rcp_shapes[1],594,16,0);
               my_flip(1);
               wait(15 - 2*(direction % 5));

               /* draw third frame of animation. */
               draw_toon_puzzle(0, x, y);
               my_flip(1);
               wait(15 - 2*(direction % 5));
            }
         }

         /* make sure both pages are identical */
         vm_dstptr = vm_buffptr;
         vm_srcptr = vm_scrnptr;
         mouse_copy(591+x,15+y,45,47);
   }
   my_mouse_on();
#endif
}




/* * * * *
*
*  static void erase_puzzle(short x, short y);
*
*  This function draws all the shapes necessary to erase the puzzle button.
*
* * * * */
static void erase_puzzle(short x, short y)
{
#ifdef	__MSDOS__
   vm_dstptr = vm_buffptr;
   vm_srcptr = vm_scrnptr;
   x_offset = x;
   y_offset = y;
   vm_fill = 1;
   vm_fcolor = vm_lcolor = bckgrnd_color;
   vm_my_rect(583,24,14,34);
   vm_fcolor = vm_lcolor = panel_color;
   vm_my_rect(597,29,36,32);
   vm_fcolor = vm_lcolor = highlight2;
   vm_my_rect(633,29,7,18);
   vm_fcolor = vm_lcolor = highlight5;
   vm_my_line(592,58,592,24);
   vm_fcolor = vm_lcolor = highlight1;
   vm_my_line(639,27,639,50);
   vm2_my_flip_draw(corners[15],592,0,0);
#endif
}



/* * * * *
*
*  void draw_toon_load_arrow(char button, short x, short y);
*
*  This function will handle all the drawing and animation of the load arrow
*  button.
*  if
*     button = 0, then draw button off.
*     button = 1, then draw button on.
*     button = 2, then toggle button from off to on to off.
*
*  This function will draw all shapes to vm_dstptr = vm_buffptr.
*
* * * * */
void draw_toon_load_arrow(char button, short x, short y)
{
#ifdef	__MSDOS__
   vm_dstptr = vm_buffptr;
   vm_srcptr = vm_scrnptr;
   x_offset = x;
   y_offset = y;
   my_mouse_off();

   switch(button)
   {
      case 0:
         vm2_my_flip_draw(toon_rcp_shapes[7],593,73,0);
         vm2_my_flip_draw(toon_rcp_shapes[8],594,86,0);
         break;
      case 1:
         vm_fcolor = vm_lcolor = panel_color;
         vm_my_rect(597,73,17,13);
         vm_fcolor = vm_lcolor = bckgrnd_color;
         vm_my_rect(593,78,4,11);
         vm2_my_flip_draw(toon_rcp_shapes[7],594,76,0);
         break;
      case 2:
         /* draw first frame of animation. */
         draw_toon_load_arrow(1, x, y);
         if (puzzle_edit_button)
         {
            vm2_my_flip_draw(toon_rcp_shapes[9],612,61,0);
            vm2_my_flip_draw(toon_rcp_shapes[10],613,73,0);
         }
         my_flip(1);
         wait(30);

         /* draw second frame of animation. */
         draw_toon_load_arrow(0, x, y);
         if (puzzle_edit_button)
         {
            vm2_my_flip_draw(toon_rcp_shapes[9],612,61,0);
            vm2_my_flip_draw(toon_rcp_shapes[10],613,73,0);
         }
         my_flip(1);

         /* make sure both pages are identical */
         vm_dstptr = vm_buffptr;
         vm_srcptr = vm_scrnptr;
         mouse_copy(592+x,73+y,23,25);
   }
   my_mouse_on();
#endif
}



/* * * * *
*
*  void draw_toon_save_arrow(char button, short x, short y);
*
*  This function will handle all the drawing and animation of the save arrow
*  button.
*  if
*     button = 0, then draw button off.
*     button = 1, then draw button on.
*     button = 2, then toggle button from off to on to off.
*
*  This function will draw all shapes to vm_dstptr = vm_buffptr.
*
* * * * */
void draw_toon_save_arrow(char button, short x, short y)
{
#ifdef	__MSDOS__
   vm_dstptr = vm_buffptr;
   vm_srcptr = vm_scrnptr;
   x_offset = x;
   y_offset = y;
   my_mouse_off();

   switch(button)
   {
      case 0:
         vm2_my_flip_draw(toon_rcp_shapes[9],612,61,0);
         vm2_my_flip_draw(toon_rcp_shapes[10],613,73,0);
         break;
      case 1:
         vm_fcolor = vm_lcolor = panel_color;
         vm_my_rect(610,61,23,25);
         vm_fcolor = vm_lcolor = highlight2;
         vm_my_rect(633,69,6,7);
         vm2_my_flip_draw(toon_rcp_shapes[9],613,64,0);
         break;
      case 2:
         /* draw first frame of animation. */
         draw_toon_save_arrow(1, x, y);
         vm2_my_flip_draw(toon_rcp_shapes[7],593,73,0);
         vm2_my_flip_draw(toon_rcp_shapes[8],594,86,0);
         my_flip(1);
         wait(30);

         /* draw second frame of animation. */
         draw_toon_save_arrow(0, x, y);
         my_flip(1);

         /* make sure both pages are identical */
         vm_dstptr = vm_buffptr;
         vm_srcptr = vm_scrnptr;
         mouse_copy(609+x,61+y,30,26);
   }
   my_mouse_on();
#endif
}



/* * * * *
*
*  void draw_toon_pig(char button, short x, short y);
*
*  This function will handle all the drawing and animation of the pig button.
*  if
*     button = 0, then draw button off.
*     button = 1, then draw button on.
*     button = 2, then toggle button from off to on to off.
*
*  This function will draw all shapes to vm_dstptr = vm_buffptr.
*
* * * * */
void draw_toon_pig(char button, short x, short y)
{
#ifdef	__MSDOS__
   vm_dstptr = vm_buffptr;
   vm_srcptr = vm_scrnptr;
   x_offset = x;
   y_offset = y;
   my_mouse_off();

   switch(button)
   {
      case 0:
         vm_fcolor = vm_lcolor = panel_color;
         vm_my_rect(597,95,36,47);
         vm_fcolor = vm_lcolor = bckgrnd_color;
         vm_my_rect(593,120,4,19);
         vm_fcolor = vm_lcolor = highlight2;
         vm_my_rect(633,93,6,34);
         vm_fcolor = vm_lcolor = highlight1;
         vm_my_line(639,93,639,100);
         draw_toon_load_arrow(0, x, y);
         vm2_my_flip_draw(toon_rcp_shapes[11],597,96,0);
         vm2_my_flip_draw(toon_rcp_shapes[12],595,115,0);
         vm2_my_flip_draw(toon_rcp_shapes[13],622,87,0);
         break;
      case 1:
         vm_fcolor = vm_lcolor = panel_color;
         vm_my_rect(597,87,36,57);
         vm_fcolor = vm_lcolor = highlight2;
         vm_my_rect(633,92,6,10);
         vm_fcolor = vm_lcolor = highlight1;
         vm_my_line(639,93,639,100);
         draw_toon_load_arrow(0, x, y);
         vm2_my_flip_draw(toon_rcp_shapes[11],597,98,0);
         vm2_my_flip_draw(toon_rcp_shapes[14],594,116,0);
         vm2_my_flip_draw(toon_rcp_shapes[15],622,93,0);
         break;
      case 2:
         /* draw first frame of animation. */
         draw_toon_pig(1, x, y);
         my_flip(1);
         wait(30);

         /* draw second frame of animation. */
         draw_toon_pig(0, x, y);
         my_flip(1);

         /* make sure both pages are identical */
         vm_dstptr = vm_buffptr;
         vm_srcptr = vm_scrnptr;
         mouse_copy(593+x,87+y,47,55);
   }
   my_mouse_on();
#endif
}



/* * * * *
*
*  void draw_toon_chklist(char button, short x, short y);
*
*  This function will handle all the drawing and animation of the chklist
*  button.
*  if
*     button = 0, then draw button off.
*     button = 1, then draw button off to on to off.
*
*  This function will draw all shapes to vm_dstptr = vm_buffptr.
*
* * * * */
void draw_toon_chklist(char button, short x, short y)
{
#ifdef	__MSDOS__
   vm_dstptr = vm_buffptr;
   vm_srcptr = vm_scrnptr;
   x_offset = x;
   y_offset = y;
   my_mouse_off();

   switch(button)
   {
      case 0:
         erase_chklist(x, y);
         vm2_my_flip_draw(toon_rcp_shapes[23],594,300,0);
         break;
      case 1:
         /* draw first frame of animation. */
         erase_chklist(x, y);
         vm2_my_flip_draw(toon_rcp_shapes[24],594,309,0);
         my_flip(1);
         wait(30);

         /* draw second frame of animation. */
         draw_toon_chklist(0, x, y);
         flip_and_copy();
         break;
   }
   my_mouse_on();
#endif
}



/* * * * *
*
*  static void erase_chklist(short x, short y);
*
*  This function erases the chklist.
*
* * * * */
static void erase_chklist(short x, short y)
{
#ifdef	__MSDOS__
   vm_dstptr = vm_buffptr;
   vm_srcptr = vm_scrnptr;
   x_offset = x;
   y_offset = y;
   vm_fcolor = vm_lcolor = 4; /* white */
   vm_rect(593,299,4,48);
   vm_fcolor = vm_lcolor = panel_color;
   vm_my_rect(597,299,36,48);
   vm_fcolor = vm_lcolor = highlight2;
   vm_my_rect(633,299,7,48);
   vm_fcolor = vm_lcolor = highlight5;
   vm_my_line(592,299,592,347);
#endif
}

void	doHandleAnim(short tx, short ty, short j, short handChars)
{
	short i;
	short frame;


	i = handASizes[j];
	frame = handAnims[j]+1;
	while (i--)
		{
		DrawAnimMapFrame(tx,ty,frame, &handall, &MapABuff, 
					handChars);
		addDMAQueue(ScrBAddr, 64*2*28, &MapABuff);
		waitDMAQueue();
		EraseAnimMapFrame(tx,ty,frame, &handall, &MapABuff, 
					handChars);
		frame++;
		wait(4);
		}



}

/* * * * *
*
*  draw_handles(PART *pptr);
*
*  This function will draw the currently active handles and
*  will animation the current handle for the specified part.
*
* * * * */
short do_handles(PART *pptr, TIM_VEC *my_loc, TIM_VEC *my_size)
{
	short tx,ty;
	short retval[6];
	short i;
	UWORD handChars;
	short j, selection;

	tx = ((my_loc->x-ledge)>>VIRTUALCOORDS)-vscrollValue;
	ty = ((my_loc->y-tedge)>>VIRTUALCOORDS)-hscrollValue;
	if (tx > 160) 
		{
		if ((tx - 86) < 0)			/* width of pop-up = 86 */
			tx = 117;
		else
			tx -= 86;
		}
	else
		{
		tx += (my_size->x>>VIRTUALCOORDS);
		if ((tx+86) >= 320)
			tx = 117;
		}
		
	if ((ty+110) > 216)				/* height of pop-up = 110 */
		ty = 53;

	if (ty < 30)
		ty = 30;

	tx -= 80;
	ty -= 30;

	tx >>= 3;					/* convert to characters */
	ty >>= 3;

	for (i=5;i>=0;i--)
		retval[i] = -1;

   ap_flags = get_ap_flags(pptr);
   if (ap_flags & AP_UNLOCK)
		retval[4] = TSM_UNLOCK;
	if (ap_flags & AP_RESIZE_X)
		retval[1] = TSM_SIZE_L;
	if (ap_flags & AP_RESIZE_Y)
		retval[3] = TSM_SIZE_T;
	if (ap_flags & AP_FLIPS_LR)
		retval[2] = TSM_FLIP_LR;
	if (ap_flags & AP_FLIPS_TB)
		retval[3] = TSM_FLIP_TB;
	if (ap_flags & AP_FLUSH)
		retval[0] = TSM_RECYCLE;
	if (ap_flags & AP_HEARTY_PART)
		retval[1] = TSM_HEARTY_PART;

	retval[5] = TSM_NONE;

	cursoractive = FALSE;
	ClearMapBuff(&MapABuff);

	SYS_LastChar = spriteChar;
	FPCStorePal(&handall);
	FPCSetPal(&handall);
	handChars = DLFPCChars(&handall) | CHARPRIORITY;
	DrawAnimMapFrame(tx,ty,0, &handall, &MapABuff, handChars);
	selection = -1;
	for (i=0;i<6;i++)
		{
		/* see if part can access this handle */
		j = retval[i];
		if (j != -1)
			{
			if (selection != -1)
				DrawAnimMapFrame(tx,ty,handAnims[j]+1, &handall, &MapABuff, 
						handChars);
			else
				selection = i;
			}
		}


	for (;;)
		{
		j = retval[selection];
		DrawAnimMapFrame(tx,ty,handAnims[j], &handall, &MapABuff, 
					handChars);

		addDMAQueue(ScrBAddr, 64*2*28, &MapABuff);
		waitDMAQueue();
		while (!SYS_JoyHit);
		SYS_JoyHit = FALSE;
		EraseAnimMapFrame(tx,ty,handAnims[j], &handall, &MapABuff, 
					handChars);

		DrawAnimMapFrame(tx,ty,handAnims[j]+1, &handall, &MapABuff, 
					handChars);

		if (SYS_JoyTable[JOY_A])
			{
			doHandleAnim(tx,ty, j, handChars);
			ClearMapBuff(&MapABuff);
			addDMAQueue(ScrBAddr, 64*2*28, &MapABuff);
			waitDMAQueue();
			SYS_LastChar = handChars;
			cursoractive = TRUE;
			return(retval[selection]);
			}
		else if (SYS_JoyTable[JOY_C])
			{
			ClearMapBuff(&MapABuff);
			addDMAQueue(ScrBAddr, 64*2*28, &MapABuff);
			waitDMAQueue();
			SYS_LastChar = handChars;
			cursoractive = TRUE;
			return(TSM_NONE);
			}
		if ((SYS_JoyTable[JOY_LEFT]) || (SYS_JoyTable[JOY_RIGHT]))
			{
			do
				{
				selection ^= 1;
				}
			while (retval[selection] == -1);
			}
		if (SYS_JoyTable[JOY_DOWN])
			{
			do
				{
				selection += 2;
				if (selection > 5)
					selection -= 6;
				}
			while (retval[selection] == -1);
			}
		else if (SYS_JoyTable[JOY_UP])
			{
			do
				{
				selection -= 2;
				if (selection < 0)
					selection += 6;
				}
			while (retval[selection] == -1);
			}
		}
}





