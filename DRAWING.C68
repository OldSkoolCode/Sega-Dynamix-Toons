/* * * * *
*
*  DRAWING.C
*
*  This file contains routines to handle all drawing to the screen.
*
*  By Kevin Ryan -- (c) 1992 Dynamix, Inc.
*
*  Modification History:
*  ---------------------
*  02/14/92 Kevin Ryan  File created
*
* * * * */
#include <string.h>
#include <ctype.h>
#include "vm.h"
#include "vm_mylib.h"
#include "tim.h"
#include "tim_text.h"
#include "simlib.h"

#define LOG_ERRORS 1

#if !FINAL
   extern char noflip;
#endif

extern WORD volatile cursorx;
extern WORD volatile cursory;

/*local routines */
void draw_pbelt_part( PART *, SHORT);
void do_conic(SHORT,SHORT,LONG,LONG,LONG,LONG,LONG,LONG);
void draw_rope_part( PART *, SHORT);
void draw_multi_part(PART *, SHORT, SHORT);
void draw_part(PART *,SHORT,SHORT,UCHAR);
void draw_using_erase(PART *,SHORT,SHORT,UCHAR);

/* Local variables */
static const char far resize_l_anim[] = { 19,20,21,22,23,22,21,20, 0};
static const char far resize_u_anim[] = { 24,25,26,27,28,29,28,27,26,25, 0};
static const char far resize_r_anim[] = { 39,39,40,40,41,41,42,42,41,41,40,40, 0};
static const char far resize_d_anim[] = { 43,43,44,44,45,45,44,44,43,43, 0};
static const char far flip_lr_anim[]  = {  9,10,11,12,13,14,15,16,17,18,
                                    17,16,15,14,13,12,11,10, 0};
static const char far flip_tb_anim[]  = { 30,31,32,33,34,35,35,35,35,35,34,
                                    33,32,31,30,30,30,30, 0};
static const char far flush_anim[]    = {  0, 1, 2, 3, 4, 5, 6, 7, 8, 0};
static const char far hearty_anim[]   = {  46,47,48,49,50,51,52,51,50,49,48,47, 0};
static const char far lock_anim[]     = {  36, 38 };
static short last_anim_handle, anim_index;

#if 1
   void vm_rope_line(short x1, short y1, short x2, short y2)
   {
      vm_lcolor = 7;
      vm_line(x1,y1,x2,y2);
   }
#else
   void vm_rope_line(short x1, short y1, short x2, short y2)
   {
      short lcolor = vm_lcolor;



      if(lcolor != background_color)
         vm_lcolor = 2; /* 1; */
      if(abs(x1-x2) < abs(y1-y2))
      {
         vm_lcolor = (lcolor == background_color ? vm_lcolor : 2);
#if 0
         vm_line(x1-1,y1,x2-1,y2);
#endif
         vm_lcolor = (lcolor == background_color ? vm_lcolor : 7);
#if 0
         vm_line(x1+1,y1,x2+1,y2);
#endif
      }
      else
      {
         vm_lcolor = (lcolor == background_color ? vm_lcolor : 2);
#if 0
         vm_line(x1,y1-1,x2,y2-1);
#endif
         vm_lcolor = (lcolor == background_color ? vm_lcolor : 7);
#if 0
         vm_line(x1,y1+1,x2,y2+1);
#endif
      }
      vm_lcolor = lcolor;
#if 0
      vm_line(x1,y1,x2,y2);
#endif
   }
#endif


/* * * * *
*
*  void draw_gp_screen(void);
*
*  This function will draw the game play field. It assumes nothing about the
*  clipping and the flip and copy. 
*
* * * * */
void draw_gp_screen(void)
{
   vm_dstptr = vm_buffptr;
   vm_lcolor = vm_fcolor = background_color;
   vm_fill = vm_clip = 1;
   my_mouse_off();

   /* erase current screen */
#if 0
   vm_rect(0,0,320,200);
#endif
   
   /* draw parts. */
   draw_parts(1);

}



void draw_active_icon()
{
   SHORT type;
   TIM_VEC my_loc,my_size;
   void *icon;
	SHORT w,h;

   /* Set clipping window and adjust if removing part from bin */
   set_game_scrn_clip();
   if((cursorx<<VIRTUALCOORDS) < vm_lclip)
      vm_lclip = 0;

   type = active_part->type;
   icon = icon_shapes;
   vm_dstptr = vm_buffptr;
	GetFrameWH(0,type,icon, &w, &h);
	w <<= VIRTUALCOORDS;
	h <<= VIRTUALCOORDS;
   draw_bitmap(icon,(cursorx<<VIRTUALCOORDS)-w/2,(cursory<<VIRTUALCOORDS)-h/2,0, type);
   my_size.x = w;
   my_size.y = h;
   my_loc.x = (cursorx<<VIRTUALCOORDS) - my_size.x/2 + old_ledge;
   my_loc.y = (cursory<<VIRTUALCOORDS) - my_size.y/2 + old_tedge;
   add_to_er(&my_loc,&my_size,ER_FILL,2,0);
   set_game_scrn_clip();
}



void draw_parts(SHORT force_draw)
{
   PART *cur_part;
   short redraw;

	if (old_tim_mode && (tim_mode != TM_RUN))
		return;

	old_tim_mode = tim_mode;

   cur_part = get_first_part(F1_STATIC_L|F1_MOVE_L);
   while (cur_part)
   {
      if (force_draw || (cur_part->redraw))
         if (cur_part != active_part)
            add_to_draw_list(cur_part);

      if (force_draw)
         cur_part->redraw = 0;
      else
         if((cur_part != active_part) && (cur_part->redraw & 0x7f))
         {
            redraw = cur_part->redraw;
            cur_part->redraw = ((redraw & 0x7f) - 1) | (redraw & 0x80);
         }
      cur_part = get_next_part(cur_part,F1_MOVE_L);
   }

   /* RichR - I found following line comment out, and did not know why. */
   /*         There was a problem with smart ends when set_redraw_from_draw() */
   /*         was being called while moving an active part around.  The */
   /*         active part would indicate that a entire wall should be drawn, */
   /*         and any smart ends that happend to be drawn on top of this wall */
   /*         would not be redrawn.  I comment the if statement back in and */
   /*         do not know what new problems might appear. */
/*   if (tim_mode == TM_RUN) */
/*      set_redraw_from_draw(); */

   do_draw_list(0,0);
}



/* * * * *
*
*  void hilite_part(PART, SHORT, SHORT, SHORT);
*
*  This function resembles the original T.I.M. function. 
*  
* * * * */
void hilite_part(PART *pptr,SHORT color,SHORT er_mode, SHORT old_pbut)
{
   #define RED          8
   #define WHITE        4

   static SHORT hl_offset = 0;
   SHORT old_rclip, old_y;
   SHORT too_tall,too_wide;
   SHORT do_top,do_bottom,do_left,do_right;
   SHORT tie_num;
   TIM_VEC my_loc,my_size;
   PART *pptr2;
   ROPE *rptr;

   if (hl_offset >= BALL_WIDTH - 1)
      hl_offset = 0;
   else
      hl_offset += 2;

   do_top = do_bottom = do_left = do_right = 1;
   vm_dstptr = vm_buffptr;

   my_loc = pptr->adj_loc;
   my_size = pptr->size;
   switch (pptr->type)
   {
      case PT_PBELT:
         if(pptr->belt && pptr->belt->link2)
         {
            pptr2 = pptr->belt->link2;
            my_loc.x = pptr2->adj_loc.x + pptr2->belt_loc.x;
            my_loc.y = pptr2->adj_loc.y + pptr2->belt_loc.y;
            my_size.x = pptr2->belt_size;
            if (pptr2->belt_size > (my_size.y>>1))
               my_size.y = 10;
            else
               my_size.y = pptr2->belt_size;
         }
         break;
      case PT_ROPE:
         rptr = pptr->rope_tie[0];
         if(rptr && rptr->link2)
         {
            pptr2 = rptr->link2;
            tie_num = rptr->l2_num;
            my_loc.x = pptr2->scrn_loc.x + pptr2->rope_loc[tie_num].x + ROPETIE_X;
            my_loc.y = pptr2->scrn_loc.y + pptr2->rope_loc[tie_num].y + ROPETIE_Y;
            my_size.x = ROPETIE_W;
            my_size.y = ROPETIE_H;
         }
         break;
   }

#if 0

   /* adjust for too small a shape to be fit by the handles */
   if (my_size.x < HANDLE_WIDTH)
   {
      my_loc.x -= (HANDLE_WIDTH - my_size.x)>>1;
      my_size.x = HANDLE_WIDTH;
   }
   if (my_size.y < HANDLE_WIDTH)
   {
      my_loc.y -= (HANDLE_WIDTH - my_size.y)>>1;
      my_size.y = HANDLE_WIDTH;
   }
   /* this will take care of the control panel option. */
   old_rclip = vm_rclip;

   vm_lclip = my_loc.x - ledge - BALL_WIDTH + 3;
   vm_rclip = my_loc.x + my_size.x - ledge - 1 + BALL_WIDTH - 3;
   vm_tclip = my_loc.y - tedge - BALL_WIDTH + 3;
   vm_bclip = my_loc.y + my_size.y - tedge - 1 + BALL_WIDTH - 3;
   vm_clip = 1;

   if (vm_lclip < PLAYFIELD_LCLIP)
   {
      vm_lclip = PLAYFIELD_LCLIP;
      do_left = 0;
   }
   if (vm_rclip > old_rclip)
   {
      vm_rclip = old_rclip;
      do_right = 0;
   }
   if (vm_tclip < PLAYFIELD_TCLIP)
   {
      vm_tclip = PLAYFIELD_TCLIP;
      do_top = 0;
   }
   if (vm_bclip > PLAYFIELD_BCLIP)
   {
      vm_bclip = PLAYFIELD_BCLIP;
      do_bottom = 0;
   }

   if ((color == RED_OUTLINE) && (pptr == active_part))
   {
      vm_lcolor = WHITE;
      vm_line(vm_lclip+2,vm_tclip,vm_rclip,vm_bclip-2);
      vm_line(vm_lclip,vm_tclip+2,vm_rclip-2,vm_bclip);
      vm_line(vm_lclip+2,vm_bclip,vm_rclip,vm_tclip+2);
      vm_line(vm_lclip,vm_bclip-2,vm_rclip-2,vm_tclip);
      vm_lcolor = RED;
      vm_line(vm_lclip+1,vm_tclip,vm_rclip,vm_bclip-1);
      vm_line(vm_lclip,vm_tclip+1,vm_rclip-1,vm_bclip);
      vm_line(vm_lclip+1,vm_bclip,vm_rclip,vm_tclip+1);
      vm_line(vm_lclip,vm_bclip-1,vm_rclip-1,vm_tclip);
      vm_line(vm_lclip,vm_tclip,vm_rclip,vm_bclip);
      vm_line(vm_lclip,vm_bclip,vm_rclip,vm_tclip);
   }

   my_loc.x = vm_lclip + ledge;
   my_loc.y = vm_tclip + tedge;

   if ((my_size.x = vm_rclip - vm_lclip + 1) < 256)
      too_wide = 0;
   else if (my_size.x < 512)
      too_wide = 1;
   else
      too_wide = 2;
      
   if ((my_size.y=vm_bclip-vm_tclip+1) < 128)
      too_tall = 0;
   else if (my_size.y < 256)
      too_tall = 1;
   else if (my_size.y < 384)
      too_tall = 2;
   else
      too_tall = 3;

   color = 11;
   my_mouse_off();
   if (do_left)
   {
      vm_tclip += hl_offset;
      old_y = vm_bclip;
      vm_bclip -= (vm_bclip - vm_tclip) % BALL_WIDTH + 1;
      switch (too_tall)
      {
#if 0
         case 3:
            draw_bitmap(mouse_shapes,vm_lclip,
               vm_tclip+384,0, color+1);
         case 2:
            draw_bitmap(mouse_shapes,vm_lclip,
               vm_tclip+256,0, color+1);
         case 1:
            draw_bitmap(mouse_shapes,vm_lclip,
               vm_tclip+128,0, color+1);
         case 0:
            draw_bitmap(mouse_shapes,vm_lclip,
               vm_tclip,0, color+1);
#endif
      }
      vm_tclip -= hl_offset;
      vm_bclip = old_y;
   }
   if (do_right)
   {
      vm_rclip++;    /*vm clipping bug */
      vm_tclip += BALL_WIDTH - hl_offset;
      old_y = vm_bclip;
      vm_bclip -= (vm_bclip - vm_tclip) % BALL_WIDTH + 1;
      switch (too_tall)
      {
#if 0
         case 3:
            draw_bitmap(mouse_shapes,vm_rclip-BALL_WIDTH,
               vm_tclip+384,0, color+1);
         case 2:
            draw_bitmap(mouse_shapes,vm_rclip-BALL_WIDTH,
               vm_tclip+256,0, color+1);
         case 1:
            draw_bitmap(mouse_shapes,vm_rclip-BALL_WIDTH,
               vm_tclip+128,0, color+1);
         case 0:
            draw_bitmap(mouse_shapes,vm_rclip-BALL_WIDTH,
               vm_tclip,0, color+1);
#endif
      }
      vm_rclip--;
      vm_tclip -= BALL_WIDTH - hl_offset + 1;
      vm_bclip = old_y;
   }
   if (do_top)
   {
      vm_rclip -= BALL_WIDTH;
      switch (too_wide)
      {
#if 0
         case 2:
            draw_bitmap(mouse_shapes,
               vm_lclip-hl_offset+BALL_WIDTH + 512,vm_tclip,0, color);
         case 1:
            draw_bitmap(mouse_shapes,
               vm_lclip-hl_offset+BALL_WIDTH + 256,vm_tclip,0, color);
         case 0:
            draw_bitmap(mouse_shapes,
               vm_lclip-hl_offset+BALL_WIDTH,vm_tclip,0, color);
#endif
      }
      vm_rclip += BALL_WIDTH;
   }
   if (do_bottom)
   {
      vm_bclip++;    /*vm clipping bug */
      vm_rclip -= BALL_WIDTH;
      switch (too_wide)
      {
#if 0
         case 2:
            draw_bitmap(mouse_shapes,
               vm_lclip+hl_offset + 2 + 512,vm_bclip-BALL_WIDTH,0, color);
         case 1:
            draw_bitmap(mouse_shapes,
               vm_lclip+hl_offset + 2 + 256,vm_bclip-BALL_WIDTH,0, color);
         case 0:
            draw_bitmap(mouse_shapes,
               vm_lclip+hl_offset + 2,vm_bclip-BALL_WIDTH,0,color);
#endif
      }
   }
   set_game_scrn_clip();
#endif

	my_loc.x = (my_loc.x-ledge)>>VIRTUALCOORDS;
	my_loc.y >>= VIRTUALCOORDS;
	my_size.x >>= VIRTUALCOORDS;
	my_size.y >>= VIRTUALCOORDS;

#if 0
		draw_part_border(pptr);
#endif

	/* -3,+6 is amount to adjust for crawl characters */
	put_crawl(my_loc.x-3, my_loc.y, my_size.x+6, my_size.y+6,
					(SYS_VCount/2) % 5, color);

   /* turn on power buttons when appropriate. */

#if 0
   my_loc.x -= (BALL_WIDTH - 3) + HANDLE_WIDTH;
   my_loc.y -= (BALL_WIDTH - 3) + HANDLE_WIDTH;
   my_size.x += (HANDLE_WIDTH + BALL_WIDTH - 3)<<1;
   my_size.y += (HANDLE_WIDTH + BALL_WIDTH - 3)<<1;
   add_to_er(&my_loc,&my_size,er_mode,2,0);
   my_mouse_on();
#endif
}



void init_draw_list()
{
   SHORT i;

   for (i=5;i>=0;i--)
      draw_plane[i] = 0;
}


void add_to_draw_list(PART *pptr)
{
   SHORT type,i;
   UCHAR plane_num;

   /* checks to see that inactive parts are not drawn. */
   if (pptr->flags2 & F2_INACTIVE)
      return;

   pptr->flags3 |= F3_IN_DRAW_LIST;
   type = pptr->type;
   for (i=0;i<2;i++)
      if ((plane_num=prop[type].plane_num[i]) != 255)
      {
#if NO_PLANE
         if (pptr == active_part)
            plane_num = 0;
#endif
         pptr->draw_list[i] = draw_plane[plane_num];
         draw_plane[plane_num] = pptr;
         if (!i)
            pptr->plane_num = plane_num;
      }
}


void do_draw_list(SHORT loc_scale_adj,SHORT size_scale_adj)
{
   UCHAR i,plane_num;
   PART *pptr;
   PART *smart_end_parts = 0;
   PART *last_septr = 0;

   vm_dstptr = vm_buffptr;
   for (i=0;i<6;i++)
   {
      plane_num = i;
      pptr = draw_plane[plane_num];
      while (pptr)
      {
         pptr->flags3 &= (F3_IN_DRAW_LIST^0xffff);

         /* If special redraw flag is set, call special draw routine */
         if(pptr->redraw & 0x80)
            draw_using_erase(pptr, loc_scale_adj, size_scale_adj, plane_num);

         /* Draw the part */
         else
            draw_part(pptr, loc_scale_adj, size_scale_adj, plane_num);

         /* If part has smart ends, add it to special list */
         if(pptr->smart_end1 || pptr->smart_end2)
         {
            if(!smart_end_parts)
               smart_end_parts = pptr;
            else
               last_septr->qptr = pptr;
            last_septr = pptr;
            last_septr->qptr = 0;
         }

         if (pptr->plane_num == plane_num)
            pptr = pptr->draw_list[0];
         else
            pptr = pptr->draw_list[1];
      }

      /* Smart ends have a priority of 4 */
      while(smart_end_parts)
      {
         draw_smart_ends(smart_end_parts);
         smart_end_parts = smart_end_parts->qptr;
      }
      smart_end_parts = last_septr = 0;

   }
   init_draw_list();

}


void draw_pbelt_part(PART *pptr,SHORT loc_scale_adj)
{
   SHORT x1,y1,x2,y2,x3,y3,x4,y4;
   PBELT *bptr;

   bptr = pptr->belt;
   if (bptr->link1 && bptr->link2)
   {
      my_mouse_off();

      x1 = bptr->pt1.x - ledge;
      y1 = bptr->pt1.y - tedge;
      x2 = bptr->pt2.x - ledge;
      y2 = bptr->pt2.y - tedge;
      x3 = bptr->pt3.x - ledge;
      y3 = bptr->pt3.y - tedge;
      x4 = bptr->pt4.x - ledge;
      y4 = bptr->pt4.y - tedge;

      if (loc_scale_adj)
      {
         x1 = (SHORT) (smuls(x1,loc_scale_adj)>>10);
         x1 += 272;
         y1 = (SHORT) (smuls(y1,loc_scale_adj)>>10);
         y1 += 72;
         x2 = (SHORT) (smuls(x2,loc_scale_adj)>>10);
         x2 += 272;
         y2 = (SHORT) (smuls(y2,loc_scale_adj)>>10);
         y2 += 72;
         x3 = (SHORT) (smuls(x3,loc_scale_adj)>>10);
         x3 += 272;
         y3 = (SHORT) (smuls(y3,loc_scale_adj)>>10);
         y3 += 72;
         x4 = (SHORT) (smuls(x4,loc_scale_adj)>>10);
         x4 += 272;
         y4 = (SHORT) (smuls(y4,loc_scale_adj)>>10);
         y4 += 72;
      }

      vm_lcolor = 0;

#if 0
      vm_line(x1,y1,x2,y2);
      vm_line(x3,y3,x4,y4);
#endif
      my_mouse_on();
   }
}



void do_conic(SHORT color,SHORT n,LONG x1,LONG x2,LONG x3,LONG y1,LONG y2,LONG y3)
{
   SHORT cur_x, cur_y;
   SHORT old_x, old_y;
   LONG px, py, rx, ry, nx, ny;
   LONG t, c;
   LONG temp;

   vm_lcolor = color;

/*   y2 = y2 << 1; */
   
   px = x3 + x1 - (x2<<1);
   py = y3 + y1 - (y2<<1);
   
   rx = (x2 - x1) << (n + 1);
   ry = (y2 - y1) << (n + 1);

   temp = n << 1;
   
   nx = x1 << temp;
   ny = y1 << temp;
   
   c = 1 << n;
   
   old_x = (SHORT) (nx>>temp);
   old_y = (SHORT) (ny>>temp);

   for ( t = 0; t <= c; t++)
      {
         cur_x = (SHORT) (nx>>temp);
         cur_y = (SHORT) (ny>>temp);
         if (old_x != cur_x || old_y != cur_y)
            {
               vm_rope_line (old_x, old_y, cur_x, cur_y);
               old_x = cur_x;
               old_y = cur_y;
            }
         nx += (rx+(t*2+1)*px);
         ny += (ry+(t*2+1)*py);
      }
}


void draw_curved_line(SHORT x1,SHORT y1,SHORT x2,SHORT y2,SHORT len_diff)
{
   SHORT x_cp,y_cp;

   if (len_diff > 4)
   {
      x_cp = (x1+x2)>>1;
      y_cp = ((y1+y2)>>1) + len_diff;
      do_conic(vm_lcolor,4,(LONG)x1,(LONG)x_cp,(LONG)x2,(LONG)y1,(LONG)y_cp,(LONG)y2);
   }
   else
      vm_rope_line(x1,y1,x2,y2);
}


void draw_rope_part(PART *pptr,SHORT loc_scale_adj)
{
   SHORT x1,y1,x2,y2;
   SHORT at_end_point,len_diff;
	void *sptr;
   PART *part1,*part2;
   ROPE *rptr;

   rptr = pptr->rope_tie[0];
   part1 = rptr->link1;
   if ((part2=part1->wpptr[rptr->l1_num]) == 0)
      part2 = rptr->link2;

   while (part1 && part2)
   {
      at_end_point = 0;
      if (part1->type == PT_PULLEY)
      {
         x1 = part1->rope_tie[0]->pt[1].x - ledge;
         y1 = part1->rope_tie[0]->pt[1].y - tedge;
      }
      else
      {
         x1 = rptr->pt[0].x - ledge;
         y1 = rptr->pt[0].y - tedge;
         at_end_point = 1;
      }
      if (part2->type == PT_PULLEY)
      {
         x2 = part2->rope_tie[0]->pt[0].x - ledge;
         y2 = part2->rope_tie[0]->pt[0].y - tedge;
      }
      else
      {
         x2 = rptr->pt[1].x - ledge;
         y2 = rptr->pt[1].y - tedge;
         at_end_point = 1;
      }

      vm_lcolor = 14; /* 6; */
      if (at_end_point)
      {
         len_diff = get_len_diff(part1,rptr,3);
         draw_curved_line(x1,y1,x2,y2,len_diff);
      }
      else
         vm_rope_line(x1,y1,x2,y2);

      if (!loc_scale_adj)
      {
         sptr = prop[PT_ROPE].part_shapes;
         if ((part1->type!=PT_PHANTOM) && (part1->type!=PT_PULLEY))
            draw_bitmap(sptr,x1+ROPETIE_X,y1+ROPETIE_Y,0, 0);
         if ((part2->type!=PT_PHANTOM) && (part2->type!=PT_PULLEY))
            draw_bitmap(sptr,x2+ROPETIE_X,y2+ROPETIE_Y,0,0);
      }

      part1 = part2;
      if (part1->type != PT_PULLEY)
         part2 = 0;
      else
         part2 = part2->wpptr[0];
   }
}


#pragma argsused
void draw_multi_part(PART *pptr,SHORT loc_scale_adj,SHORT size_scale_adj)
{
   SHORT type,state;
   SHORT i,j,x,y;
   SHORT width,height,start_x;
   SHORT width_size, width_scale;
   SHORT sn;
   UCHAR num_shapes,count;
   TIM_SCVEC_C far *offset;
   P_PART_ELEMENTS elements;

   type = pptr->type;
   state = pptr->state;
   elements = &prop[type];

   switch (type)
   {
      case PT_LADDER:
         width_size = 16<<VIRTUALCOORDS;
         width_scale = 4+VIRTUALCOORDS;
         break;
      default:
         width_size = 8<<VIRTUALCOORDS;
         width_scale = 3+VIRTUALCOORDS;
   }

   if ((offset=elements->shp_offset) != 0)
      offset += state;

   my_mouse_off();
/*   vm_buffptr = vm_dstptr = vm_scrnptr; */
/*   vm_lcolor = vm_fcolor = 0xe5; */
/*   vm_fill = 1; */
/*   vm_rect(pptr->scrn_loc.x-ledge, pptr->scrn_loc.y-tedge,  */
/*      pptr->size.x, pptr->size.y); */

   num_shapes = elements->toon_property;
   count = 0;
   width = pptr->size.x >> width_scale;
   height = pptr->size.y >> 3+VIRTUALCOORDS;
   start_x = pptr->scrn_loc.x - ledge;
   y = pptr->scrn_loc.y - tedge;
   if (offset)
   {
      start_x += offset->x;
      y = offset->y;
   }
   sn = state;
   for (i=0;i<height;i++,y+=8<<VIRTUALCOORDS)
      for (j=0,x=start_x;j<width;j++,x+=width_size)
      {
         if (height == 1)
         {
            if (!j)
               sn = state;
            else
               if (j == (width-1))
                  sn = state + num_shapes + 1;
               else
                  sn = state + 1 + (count++ % num_shapes);
         }
         else
            if (width == 1)
            {
               if (!i)
                  sn = state + 2 + num_shapes;
               else
                  if (i == (height-1))
                     sn = state + 3 + 2 * num_shapes;
                  else
                     sn = state + 3 + num_shapes + (count++ % num_shapes);
            }

			if (pptr->flags3 & F3_BACKGROUND)
         	draw_sbitmap(elements->part_shapes,x,y,0, sn);
			else
         	draw_bitmap(elements->part_shapes,x,y,0, sn);
      }
}

void draw_norm_part(PART *pptr,UCHAR plane,SHORT loc_scale_adj,SHORT size_scale_adj)
{
   SHORT type,state;
   TIM_SCVEC_C far *offset;
   P_PART_ELEMENTS elements;
   P_SSHAPE ssptr;

   type = pptr->type;
   state = pptr->state;
   elements = &prop[type];

   if ((offset=elements->shp_offset) != 0)
      offset += state;

   my_mouse_off();
   if (pptr->flags2 & F2_SUPERSHAPE)
      ssptr = *(elements->super_shapes+state);
   else
   {
      ssptr = &single_super_shape;
      single_super_shape.shp_num[0] = state;
      single_super_shape.plane_num = plane;
      if (offset)
      {
         single_super_shape.offset[0].x = offset->x;
         single_super_shape.offset[0].y = offset->y;
      }
      else
         single_super_shape.offset[0].x =
         single_super_shape.offset[0].y = 0;
   }

   draw_supershape(pptr,ssptr,elements->part_shapes,plane,loc_scale_adj,
      size_scale_adj);
   my_mouse_on();
}



/* * * * *
*
*  void draw_supershape(PART *pptr,P_SSHAPE ssptr,void *shape_table,
*    UCHAR plane,SHORT loc_scale_adj,SHORT size_scale_adj);
*
*  This function will process the specified supershape information and draw
*  the shape.
*
* * * * */
#pragma argsused
void draw_supershape(PART *pptr,P_SSHAPE ssptr,void *shape_table,
  UCHAR plane,SHORT loc_scale_adj,SHORT size_scale_adj)
{
   UCHAR snum;
	CHAR i;
   void *sptr;
   SHORT x,y,flip_flag;
	SHORT w,h;

   /* If no shape table, just return */
   if(!shape_table)
      return;

   while (ssptr)  
   {
      /* This check handle the plane drawing aspect of T.I.M.   */
#if NO_PLANE
      if ((ssptr->plane_num!=plane) && (pptr!=active_part))
#else
      if (ssptr->plane_num!=plane)     /* This replaces the above to allow the */
                                       /* planes to work even on the active part */
#endif
      {
         ssptr = ssptr->next;
         continue;
      }

		for (i=0;(i<4)&&(ssptr->shp_num[i] != 255);i++);

      for (i--;i>=0;i--)
      {
	      snum = ssptr->shp_num[i];
         sptr = shape_table;
			GetFrameWH(0,snum,sptr,&w,&h);
			w <<= VIRTUALCOORDS;
			h <<= VIRTUALCOORDS;
         x = pptr->scrn_loc.x - ledge;
         y = pptr->scrn_loc.y - tedge;
         flip_flag = 0;
         
         if (pptr->flags2 & F2_FLIP_H_DRAW)
         {
            x += pptr->base_size.x - (ssptr->offset[i].x + w);
            flip_flag = FLIP_HORIZONTAL;    /*really flips horz */
         }
         else
            x += ssptr->offset[i].x;
         
         if (pptr->flags2 & F2_FLIP_V_DRAW)
         {
            y += pptr->base_size.y - (ssptr->offset[i].y + h);
            flip_flag |= FLIP_VERTICAL;    /*really flips vert */
         }
         else
            y += ssptr->offset[i].y;

			if (pptr->flags3 & F3_BACKGROUND)
	         draw_sbitmap(sptr,x,y,flip_flag, snum); 
			else
	         draw_bitmap(sptr,x,y,flip_flag, snum);
      
      }
      ssptr = ssptr->next;
   }
}


/* * * * *
*
*  draw_using_erase(part);
*
*  This function will use the erase rectangle list to
*  set up clipping rectangles before the specified part
*  is drawn.
*
* * * * */
void draw_using_erase(PART *part,SHORT loc_scale_adj,SHORT size_scale_adj,UCHAR plane_num)
{
#ifdef _MSDOS_
   ERASE_RECT far *er_ptr;
   short    ex,ey,ex2,ey2;
   short    px,py,pw,ph;

   /* If part is a rope, always draw it (no clipping) and return */
   /* Also, always draw the conveyor belt! */
   if((part->type == PT_ROPE) || (part->type == PT_PBELT))
   {
      draw_part(part, loc_scale_adj, size_scale_adj, plane_num);
      return;
   }

   /* Determine location and size of part */
   px = part->scrn_loc.x + part->offset.x - ledge;
   py = part->scrn_loc.y + part->offset.y - tedge;
   pw = part->size.x;
   ph = part->size.y;

   /* Check all rectangles for overlap */
   er_ptr = er_processed;
   while(er_ptr)
   {
      /* Determine size of erase rectangle */
      ex  = er_ptr->cx;
      ey  = er_ptr->cy;
      ex2 = er_ptr->cxw;
      ey2 = er_ptr->cyh;

      /* If erase rectangle is a line, adjust size and location */
      if(er_ptr->flags & ER_LINE)
      {
         /* Due to VM not clipping on absolute pixels, do adjustment */
         ex &= ~7;   /* Round down */
         ex2 |= 7;   /* Round up */
      }

      /* If part is completely inside rectangle, draw it normally */
      if((px >= ex) && (px+pw <= ex2) && (py >= ey) && (py+ph <= ey2))
      {
         set_game_scrn_clip();
         draw_part(part, loc_scale_adj, size_scale_adj, plane_num);
         return;
      }

      /* If part overlaps erase rectangle, set clip and draw part */
      if(   (px <= ex2) && (px+pw >= ex)
         && (py <= ey2) && (py+ph >= ey)
         && (ex2 > ex)  && (ey2 > ey))
      {
         vm_clip = 1;
         vm_lclip = ex;
         vm_rclip = ex2;
         vm_tclip = ey;
         vm_bclip = ey2;
         draw_part(part, loc_scale_adj, size_scale_adj, plane_num);
      }

      /* Move to next erase rectangle (change lists if necessary) */
      er_ptr = er_ptr->next;
   }

   /* Clear the special flag for this part and return to default clipping */
   set_game_scrn_clip();
#endif
}

/* * * * *
*
*  draw_part(part);
*
*  This function will draw the specified part.
*
* * * * */
void draw_part(PART *part,SHORT loc_scale_adj,SHORT size_scale_adj,UCHAR plane_num)
{
   short type;

   type = part->type;
   /* Since some parts depend on a shape in order for their size  */
   /* and base_size to be set, a check is made to see if these    */
   /* fields are zeros and if a shape table was loaded.  If both  */
   /* cases are true, then the size and base_size fields are set. */
   /* This causes a small amount of overhead each time a part is  */
   /* drawn.  However, this is the only place the bitmap files    */
   /* are loaded.  The other option is to force a loaded at the   */
   /* beginning of the program of all of the bitmap files.        */
   if(!part->base_size.x || !part->base_size.y)
		{
      load_part_bitmaps(type);
      set_part_size(part);
		}

   /* Draw a multidraw part */
   if (part->flags1 & F1_MULTIDRAW)
   {
      load_part_bitmaps(type);
      draw_multi_part(part,loc_scale_adj,size_scale_adj);
   }
   /* Draw the part */
   else switch (type)
   {
      case PT_PBELT:
      	load_part_bitmaps(type);
         draw_pbelt_part(part,loc_scale_adj);
         break;
      case PT_ROPE:
	      load_part_bitmaps(type);
         draw_rope_part(part,loc_scale_adj);
         break;
      case PT_HC_BELT:
	      load_part_bitmaps(type);
         draw_conveyor_belt(part,plane_num,loc_scale_adj,size_scale_adj);
         break;
      case PT_PHANTOM:
         break;
      case PT_UD_COUNTER:
	      load_part_bitmaps(type);
         draw_ud_counter(part,plane_num,loc_scale_adj,size_scale_adj);
         break;
      case PT_INCR_DECR:
	      load_part_bitmaps(type);
         draw_incdec(part,plane_num,loc_scale_adj,size_scale_adj);
         break;
      case PT_MESSAGER:
	      load_part_bitmaps(type);
         draw_messager(part,plane_num,loc_scale_adj,size_scale_adj);
         break;
      case PT_EGG_TIMER:
	      load_part_bitmaps(type);
         draw_egg_timer(part,plane_num,loc_scale_adj,size_scale_adj);
         break;

      case PT_SID_MOUSE:
      case PT_AL_CAT:
         update_character(part);
         draw_norm_part(part,plane_num,loc_scale_adj,size_scale_adj);
         break;
      default:
	      load_part_bitmaps(type);
         draw_norm_part(part,plane_num,loc_scale_adj,size_scale_adj);
         break;
   }

   #if !FINAL
      if(debug_mode)
      {
         draw_boundry_rect(part);
         draw_part_rect(part);
         draw_part_border(part);
      }
   #endif


}

/* * * * *
*
*  free_er_processed();
*
*  This function frees the processed erase rectangles by
*  moving them to the er_avail list.
*
* * * * */
void free_er_processed(void)
{
#ifdef _MSDOS_
   ERASE_RECT far *er_ptr;

   /* Find bottom of processed list */
   er_ptr = er_processed;
   while(er_ptr && er_ptr->next)
      er_ptr = er_ptr->next;

   /* Move list to er_avail list */
   if(er_ptr)
   {
      er_ptr->next = er_avail;
      er_avail = er_processed;
      er_processed = 0;
   }
#endif
}



